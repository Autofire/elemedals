{
id: "pivot_properties",
prototype: ["pivot_input_keyboard"],

properties: {
	/***************************************************************************
	 * ANIMATIONS CONSTANTS
	 *  Pivot uses an animation numbering/suffixing system to make it easier to
	 * expand upon his animation set.
	 *
	 * We are assuming that animations are formatted as <group>#S where S is a
	 * letter representing the animation type, and # is a number for the
	 * animation. There can be no type if there is no number for the animation
	 *
	 * Check cANIM_SUFFIXES for a full listing of suffixes. If you use one
	 * that doesn't exist, YOU COULD BREAK THE SYSTEM.
	 ***************************************************************************/
	// If the animation has a number, we want to read the two characters before it
	cCURRENT_ANIM_SUFFIX: "string <- animation[size(animation) - 1]",
	 
	cANIM_SUFFIXES: "{string -> string} ::
	   {'E': 'End',
		'S': 'Start'
	   }
	",
	
	cANIM_TYPE: "string ::
		if(cCURRENT_ANIM_SUFFIX in keys(cANIM_SUFFIXES),
		   cANIM_SUFFIXES[cCURRENT_ANIM_SUFFIX],
		   'none'
		)
	",
	
	cANIM_NUM:   "int ::
		CharToInt(string <- animation[size(animation) - number_offset])
			where number_offset = if(cANIM_TYPE = 'none', 1, 2)
	",
	
	// This turns 0 into ''
	cANIM_NUM_TO_STR: "string|int ::
		if(cANIM_NUM != 0, cANIM_NUM, '')
	",
			
	cANIM_NAME: "string :: animation[ : _anim_name_size]
		where _anim_name_size =
			if(cANIM_NUM  = 0 and cANIM_TYPE  = 'none',
			   size(animation),	 // Return the full name if no suffixes

			   // else if
			   cANIM_NUM != 0 and cANIM_TYPE != 'none',
			   size(animation) - 2, // Trim both letter and number suffix

			   // else
			   size(animation) - 1  // Trim either letter or number suffix
			)
	",
	
	
	/////////////////////
	// ANIMATION BOOLS //
	/////////////////////
	cIN_GROUNDED_ANIM: "bool :: bool(
		self.animation in ['stand', 'run']
	 or cIN_END_ANIM
	)",
	
	cIN_END_ANIM: "bool :: cANIM_TYPE = 'End'",
		
	cIN_CONTROLLABLE_ANIM: "bool :: bool(
		self.animation in ['stand', 'run', 'jump', 'beginFall', 'fall', 'shoot']
		//or cIN_END_ANIM
	)",


	///////////////
	// FUNCTIONS //
	///////////////
	
	/******************************************************
	 * NextAnimationInChain
	 *  Given the base name of an animation and the current
	 * animation number, this function will check if there
	 * is there is another animation in a chain, where the
	 * animations are formatted as <name><num><type>. If
	 * There is one that ends in 'S', this function will
	 * return that one. Otherwise, it will try without the
	 * 'S'. If all else fails, it will return fallbackAnim.
	 ******************************************************/
	NextAnimationInChain: "def(string animName,	// Name of the animation
							   int    animNum,	 // CURRENT anim number
							   string fallbackAnim = 'stand') -> string
	
		if(animName + (animNum + 1) + 'S' in available_animations,
			animName + (animNum + 1) + 'S',  // Return
		   animName + (animNum + 1) in available_animations,
			animName + (animNum + 1),		// Return
			fallbackAnim					 // Return
		)
	",
	
} // End of properties
} // End of file
