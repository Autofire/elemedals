#Originates from Frogatto

# This prototype is for all the game-mechanics that have nothing to do with how a player moves, but which track stuff to do with things like key input, score tracking, events, achievements, inventory, etc.  This stuff should be fairly portable across game genre types.
# This prototype is the one declared in module.cfg as "the" playable character object type in frogatto, which all playable characters must inherit from.  The purpose of this is to allow us to reference functions specific to the character in levels (like recording game events) without having to do a type declaration on every single line.
# Also, this prototype must avoid any sort of physics/gameplay interaction with anything in the game, because it is also used for menu controllers and such.

{
id: "player_controlled",
solid_dimensions: [],
is_human: true,
prototype: ["elem_hittable"],
collide_dimensions: [],

properties: {

	help: "string <- q{\nDebug Console Help:\nThis is the debug console. Commands, which are written in FFL, are run on the\nselected object. For example, you just ran the help command on our hero. Some\nother commands you could try might be 'set(velocity_y, -5000)', or 'add(hp,5)'.To change the target of your actions in the console, click on the desired\nobject. There is a lot more you can do with FFL, so have a look at the\ndocumentation on our wiki, https://github.com/frogatto/frogatto/wiki/. If you\nget stuck, www.frogatto.com has a friendly forum where you can seek advice.\nPress ctrl-d to close the console.\n}",
	
	team: "'player'",

	store_event_add: "def(string event_name, int addend) -> commands
		set(stored_events, zip(stored_events, {(event_name) -> addend}, a+b))
		asserting event_name != '' | {message:'Attempting to add a stored event, but the event name given is an empty string.', name:event_name, addend:addend}",
	
	store_event: "def(string event_name, int value) -> commands
		add(stored_events, {(event_name) -> value})
		asserting event_name != '' | {message:'Attempting to store an event, but the event name given is an empty string.', name:event_name, value:value}",
	
	get_stored_event: "def(string event_name) -> string|int|null (stored_events[event_name])",
	stored_events: {type: "{string -> int}", default: {"started_game" : 1}},


		//this gets used for stuff like event storage, but only for when it needs a non-integer type.  Don't ever use this unless you really need it (i.e. you need to store arrays of stuff, etc), because it skips around type checking.
	custom_storage: { type: "{string -> any}", default: {} },

	is_demo_version: "bool :: false",


#-------------------------- inventory commands --------------------------#
	acquire_gold: "def(int increase) -> commands [
		if((int <- coins_total_obtained) + increase >= 10, achievement('pocket_money')),
		if(coins_total_obtained + increase >= 1000, achievement('numismatologist')),
		if(coins + increase >= 99999, [
			set(coins, 99999),
			set(gold_counter, 99999-coins),
		], [
			add(coins, increase),
			add(coins_total_obtained, increase),
			add(gold_counter, increase),
		]),
		set(last_got_gold, level.player.cycle),
		fire_event(level.player,'display_gold')
	]",

	
	
	//TODO: Test this.
//	register_kill: "def(object enemy) -> commands [
//		if(time()-chain[size(chain)-4][1] < 10,
//			achievement('rampage')), //Look past the current object, and four objects into history, to get the timestomp of the enemy. If the time difference is less than five seconds, you get an achievement!
//		if(not find(chain, value[0] and value[0].type != chain[0][0].type), 
//			achievement('grudge')),
//		set(me.vars.achievement_kill_chain, slice(me.vars.achievement_kill_chain, 1, 16) + [[enemy, time()]])
//	] where chain = me.vars.achievement_kill_chain",
	
	register_kill: "def( obj hittable victim) -> commands null", //ignore this for now, deal with it later
	
//	register_kill: "def( obj hittable victim) -> commands [
//						set(recorded_kills, slice(recorded_kills, 1,16) + {victim.type : time() }), //record only the last 16, don't grow the structure indefinitely
//						
//							//two achievements we check for:
//							// 'rampage' - check the last five objects, see if they all got killed within 5 seconds.
//						if(time() - timestamps[ size(timestamps) -4] < 10,  achievement('rampage')) where timestamps = values(recorded_kills),
///							// 'grudge' - check if the last 10 objects killed were all the same type
//						if(size(enemy_types) > 9, if(not find(enemy_types[size(enemy_types)-10, size(enemy_types)], value != enemy_types[size(enemy_types)])  , achievement('grudge'))) where enemy_types = keys(recorded_kills),
//					]",

#-------------------------- vars --------------------------#
		#-- general --#
	recorded_kills: { type: "{string -> int}", default: {"nothing" : 0} },  
	score: {type: "int", default: 0},
	high_score: {type: "int", default: 0, persistent: false},
	levels_visited: { type: "[string]", default: [] },
	
	heal: "def(int amount) -> commands add(me.hitpoints, int <- min(amount, level.player.max_hitpoints-level.player.hitpoints))", //There is no equivalent mana function because mana, not being a built-in, has been able to have a setter added to it that does the same thing.

		#-- money --#
	coins: { type: "int", default: 0 },
	coins_total_obtained: { type: "int", default: 0 },
	last_got_gold: { type: "int", default: 0 },		//tracks how long ago you got a coin, to decide if we should pop up a number for the tally
	gold_counter: { type: "int", default: 0 },		//used to tally up recent acquisition of gold for the "number" that will flash in the air after you grab several coins.

	
		#-- mana --#
	mana: {
		type: "decimal",
		default: 5000,
		set: "[commands] <- [
			set(_data, if(not should_manashock, newValue, 0)), 
			if(should_manashock, set(mana_shock_cycle, cycle))
		] where should_manashock = sign(newValue - _data) < 0 and newValue < mana_regen_per_frame*2
		  where newValue = median(0, value, max_mana)"
	},
	
	mana_shock_active: "bool :: cycle - mana_shock_cycle < mana_shock_duration",
	mana_shock_duration: "int :: 150",
	mana_shock_cycle: { type: "int", default: -150 },
	mana_shock_guard: "def(commands thingToDo) -> commands if(not mana_shock_active, thingToDo)",

	mana_regen_per_frame: 1,
	max_mana: { type: "int", default: 5000 },
},

on_display_gold: "[
	if( cycle - last_got_gold > 20 and gold_counter > 0, [
		spawn('text_flash',midpoint_x,midpoint_y-20,{ txt: '+'+gold_counter}), 
		set(gold_counter,0)
	], 
		schedule(10,fire_event('display_gold'))
	),
]",

}
