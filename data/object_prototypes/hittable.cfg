#Originates from Frogatto

{
id: "hittable",
prototype: ["standard_values"],
is_strict: true,
collide_dimensions: ["player","~enemy","~hazard"],

mass: 5,
properties: {
#--------------------------  constants --------------------------#
	cTEAM: "string :: 'evil'",
	
	//a special exemption; used on e.g. the shockwave airplane boss bomb,
	// to keep it from killing the bridge
	cTEAMS_WHICH_I_CANNOT_HURT: "[string] :: []",
	
	cBULK: "decimal :: 1.0",		//capitalized to differentiate from builtin
	cIS_A_FLIER: "bool :: false",
	cFLINCH_THRESHOLD: "int :: 3",
	cHURT_VELOCITY_Y: "int :: -400",
	cHURT_VELOCITY_X: "int :: -200",
	cATTACK_KNOCKBACK_X: "int :: 0",
	cATTACK_KNOCKBACK_Y: "int :: 0",
	cATTACK_DAMAGE: "int :: 0",
	cATTACK_DAMAGE_TO_PLAYER: "int :: 0",
	cDAMAGE_TYPE: "string :: 'neutral'",  //options include fire, acid, energy
	cARMOR: "int :: 0",
	cPOSTHIT_INVINCIBILITY_PERIOD: "int :: 0",
	cDAMAGE_COOLDOWN: "int :: 0",	// If this is negative, solely use attack numbering
	cSOURCELESS_DAMAGE_COOLDOWN: "int :: 20",
	cPOINTS_VALUE: "int :: 0",
	
	cBASE_RUN_SPEED:     "int :: 100",
	cPIERCE_SPEED_DROP: "int :: int(cBASE_RUN_SPEED * speed_drop)",
	cRUN_SPEED:          "int :: cBASE_RUN_SPEED - cPIERCE_SPEED_DROP",
	
	cMATERIAL_SOUND: "string :: 'default'",
	
	cPHYSICAL_SIZE: "int :: 16",
	cIS_PLAYER_BODY_PART: "bool :: false",

	cTAXONOMY: "string :: 'neutral'",	//e.g. plant, bug, fish, etc.  Used for damage type reductions.
	cBASIC_TYPE: "string :: me.type",
	
	cIS_BOUNCY: "bool :: false",	// If true, makes others bounce when jumped on.
	cBOUNCE_VELOCITY_X: "int :: 0",
	cBOUNCE_VELOCITY_Y: "int :: -1000",

	# ----- ELEM: status and energy variables ----- #
	energy: { type: "int", default: 80 },
	cMAX_ENERGY: "int :: 100",
	cENERGY_REGEN_RATE: "int :: 1",
	
	// Elemental drains victim's energy
	cELEMENTAL_DAMAGE: "int :: 0",
	#elemental_time:  { type: "int", default: 0 }, # Elemental is an instant effect
	
	// Shadow blocks healing (and creates explosions?). The amount of healing
	// blocked is a percentage, and is capped at max_time. (So 100 shadow_time means
	// no healing is possible.)
	cSHADOW_DAMAGE: "int :: 0",
	cSHADOW_DECAY_RATE: "int :: 1",
	shadow_time:   { type: "int", default: 0 },
	
	// Piercing slows victims after a certain interval. When the victim stops
	// moving, this slow disapates quickly.
	cPIERCE_DAMAGE:  "int :: 0",
	cPIERCE_DECAY_RATE: "int :: 1",
	pierce_time:    { type: "int", default: 0 },
	
	old_midpoint_x: { type: "int", default: 0 }, // Used for figuring out the distance moved
	cPIERCE_MOVE_DEADZONE:  "int :: 5",	     // Movement delay until piercing takes effect
	speed_drop:     { type: "decimal", default: 0.00 }, // Current drop in speed
	cMAX_SPEED_DROP: "decimal :: 0.80",	     // Maximum drop in speed. Period.
	cSPEED_DROP_PER_STEP:   "(pierce_time / speed_drop_delay / 100)
		where speed_drop_delay = 3.0",	     // A higher number means it drops slower
	cSPEED_DROP_DECAY_RATE: "decimal :: 0.15",

	// All rates are applied every cSTATUS_TICK_FREQ cycles
	cSTATUS_TICK_FREQ: "int :: 10",	
	cMAX_DMG_STATUS_TIME: "int :: 100",

	# ----- ELEM: attack numbers ----- #
	/* The attack number system is a way to bypass mercy invincibility, and is
	 * intended mainly for attack combos. (Such as the player's triple slash.)
	 * Attackers using the number system will have a major and minor attack
	 * number. The major number is incremented every separate set of attacks,
	 * while the minor number is incremented every individual attack.
	 * (For example, the one triple slash has the same major number, but the
	 * minor number changes every slash.) An attack may only pierce invincibility
	 * as long as the major number is the same but the minor number is one higher
	 * than the previous attack's number.
	 *
	 * Attackers who don't use this system should leave their minor number at
	 * any positive number.
	 *
	 * There is also a special exception: minor attack number of zero. This is
	 * reserved for shot-gun effects that are uninterrupted multihit attacks.
	 * negative minor numbers are reserved for future expansions. */
	 
	// Note that we want the animations to control minor numbers, but major
	// numbers are across all animations.
	major_attack_num: { type: "int", default: 0 },
	cMINOR_ATTACK_NUM: "int :: 1",
	
	last_major_attack: { type: "int", default: -1 },
	last_minor_attacks: { type: "[int]", default: [0] },
	
		#-- shot includes --#
	deflectable_via_attacks: "bool :: if(cTEAM = 'player', false, true)",  
	dies_upon_dealing_damage: "bool :: true",
	is_a_shot: "bool :: false",
	goes_through_enemy_shots: "bool :: false",
	
		#-- special flags for specific objects --#
	affects_ethereal_block_triggers: "bool :: true",
		
#--------------------------  core behavior handlers --------------------------#
	get_hit_by: "def(obj hittable collide_with) -> commands
		execute(me, [
			handle_special_damage_response(collide_with),
	
			if(  collide_with.cATTACK_DAMAGE > 0
			 and collide_with.hitpoints > 0
			 and (attack_off_cooldown 
			   or is_next_attack_in_chain
			   or is_first_attack_in_chain)
			 and not is_invincible, [				
				display_posthit_invincibility_flash_sequence(),
				handle_flinch(collide_with),
				handle_damage(collide_with),					
				handle_knockback(collide_with),
					
				set(last_major_attack, collide_with.major_attack_num),
				set(last_minor_attacks, [collide_with.cMINOR_ATTACK_NUM]),
				set(time_last_hit, level.cycle),
			]),
		])
		
		// True if the same major but different minor (or 0)
		where is_next_attack_in_chain = 
			if(   collide_with.major_attack_num = last_major_attack
			  and (not collide_with.cMINOR_ATTACK_NUM in last_minor_attacks
			    or collide_with.cMINOR_ATTACK_NUM = 0),
					true,
					false
			)
		
		// True if new major attack
		where is_first_attack_in_chain =
			if(collide_with.major_attack_num != last_major_attack,
				true,
				false
			)
			
		// If cDAMAGE_COOLDOWN is negative, we want this part to ALWAYS
		// be false; it's never off cooldown because there is no cooldown!
		where attack_off_cooldown =
			if(collide_with.cDAMAGE_COOLDOWN < (level.cycle - time_last_hit)
			  and collide_with.cDAMAGE_COOLDOWN > -1,
				true,
				false
			)
	",
	
	/*take damage and invoke the usual behavior, but without having a source
	object available to refer to. This almost universally should be used for e.g.
	being stomped on, or other self-determined damage amounts (falling?).
	It's also used for thrown damage because the throwee is dead and would
	(potentially) be a null reference by the time the latter collision was processed.*/
	
	get_hit_sourceless: "def(string cDAMAGE_TYPE, int damage_amount) -> commands 
		execute(me,
			if( (not is_invincible)
			 and (damage_amount >= cARMOR)
			 and (cSOURCELESS_DAMAGE_COOLDOWN < (level.cycle - time_last_hit)), [
				display_posthit_invincibility_flash_sequence(),
				handle_damage_sourceless(cDAMAGE_TYPE, damage_amount),
				/* specifically skip flinching, because kitties don't do it.
				 * TODO: Might be something to later reconsider. */
				set(time_last_hit, level.cycle),
			])
		)
	",

#-------------------------- identifiers --------------------------#
	
	

#-------------------------- generic helper functions --------------------------#
	facing_towards_player: "bool ::
		facing = if(level.player.midpoint_x < self.midpoint_x, -1, 1)",
		
	attempt_animation: "def(string anim_name, string fallback_anim) -> commands
		execute(me,
			if(anim_name in available_animations,
				set(animation, anim_name),
				set(animation, fallback_anim)
			)
		)
	",
	
	// subtraction without underflow
	sub: "def(int num1, int num2) -> int 
		if(num1 - num2 > 0,
			num1 - num2,
			0
		)
	",
		
	decimal_sub: "def(decimal num1, decimal num2) -> decimal 
		if(num1 - num2 > 0,
			num1 - num2,
			0.0
		)
	",

#-------------------------- behavior handlers --------------------------#
# anims/movement
	/* meant for unique actions upon taking damage, like losing wings. Also for
	 * special type-based behavior that happens regardless of damage amount (such
	 * as maybe a feathered creature having its feathers burned off and
	 * effectively turning into a different, flightless enemy type). */
	handle_special_damage_response: "def(obj hittable|null collide_with) -> commands null",
	
	handle_flinch: "def(obj hittable collide_with) -> commands
		execute(me,
			if(final_damage_amount(collide_with, collide_with.cATTACK_DAMAGE) >= cFLINCH_THRESHOLD,
				if(me.cIS_A_FLIER,
					cause_flinch(collide_with),
					if(is_standing, cause_flinch(collide_with) )
				)
			)
		)
	",
	
	cause_flinch: "def(obj hittable|null collide_with) -> commands
		execute(me,
			if(  collide_with != null 
			 and collide_with.cATTACK_KNOCKBACK_X = 0, [
				add(me.velocity_x,
					me.cHURT_VELOCITY_X *
					 sign(me.midpoint_x - if(collide_with, collide_with.midpoint_x, 0))
				), 
			add(me.velocity_y,me.cHURT_VELOCITY_Y),
			cause_hurt_anim(collide_with)
			])
		)
	",
	
	cause_hurt_anim: "def(obj hittable|null collide_with) -> commands
		execute(me,
			if('hurt' in available_animations, 
				set(me.animation, 'hurt')
			)
		)
	",
	
	// player objects will always do special responses to damage
	// (like making the screen flash), besides the built-in stuff
	player_damage_response: "def(string cDAMAGE_TYPE, int amount) -> commands null",

	elastic_collision: "def(
		obj hittable the_other_object,
		{multiplier: decimal,
		 constraint: {min: decimal, max: decimal}|null} params
	) -> commands (
		[set(velocity_x, radius * cos(angle)), set(velocity_y, radius * sin(angle))]
			where angle = lib.math.angle(the_other_object, me)
			where radius = if(params.constraint,
				lib.math.constrain( params.constraint.min,
									params.multiplier * velocity_magnitude,
									params.constraint.max ),
				params.multiplier * velocity_magnitude)
		)  where velocity_magnitude = hypot(velocity_x,velocity_y)
	",
	
# damage
	//meant for applying any kind of arithmetic to the raw damage amount, based on type.
	/* this is what you overload if you want to have an exception to the damage
	 * tables (i.e. for an unusual weakness; as opposed to a usual one for a
	 * given type) */
	handle_custom_cDAMAGE_TYPE_modifications: "
		def(string cDAMAGE_TYPE, int amount) -> int|null null #virtual#
	",
	
	/* only overload this if you want to completely annul the damage tables for
	 * this object (i.e. for complete immunity to all but one damage type) */
	handle_cDAMAGE_TYPE_modifications: "def(string cDAMAGE_TYPE, int amount) -> int
		if(handle_custom_cDAMAGE_TYPE_modifications(cDAMAGE_TYPE,amount) != null,
			int <- handle_custom_cDAMAGE_TYPE_modifications(cDAMAGE_TYPE,amount),
			if(uses_custom_damage_table,
				int(custom_damage_table[cDAMAGE_TYPE] * amount),
				if(me.cTAXONOMY in keys(damage_tables),
					int(damage_tables[me.cTAXONOMY][cDAMAGE_TYPE] * amount),
					amount
				)
			)
		)
	", //the neutral case automatically falls through
	
	//cheap trick:  if you just want something to take 100% damage from all damage
	//types, you can use this without redefining the 'custom_damage_table', which
	//happens to just have 100% as the value for everything.
	uses_custom_damage_table: "bool :: false",
	
	//meant for flat, type-agnostic reductions to ALL damage.
	handle_base_damage_reductions: "def(int amount) -> int amount #virtual#",  
	
	final_damage_amount: "def(interface {cDAMAGE_TYPE: string} collide_with, int damage_amount) -> int
		if( (damage_amount < cARMOR)
		 or me.is_invincible,
		 	0,
		 	handle_cDAMAGE_TYPE_modifications(collide_with.cDAMAGE_TYPE,
		 									 handle_base_damage_reductions( damage_amount )
		 	)
		)
	",
	
	will_be_dead: "def(int damage_amount) -> bool ((me.hitpoints - damage_amount) <= 0)",
	
	handle_damage_sourceless: "def(string cDAMAGE_TYPE, int amount) -> commands 
		execute(me, [
				if(will_be_dead(dmg),
					handle_death({cDAMAGE_TYPE:cDAMAGE_TYPE})
				),
				add(me.hitpoints, -dmg),
				display_hurt_visuals({cDAMAGE_TYPE:cDAMAGE_TYPE}, dmg),
				player_damage_response(cDAMAGE_TYPE,dmg)
		]) where dmg = final_damage_amount({cDAMAGE_TYPE:cDAMAGE_TYPE}, amount)
	",
	
	handle_damage: "def(obj hittable collide_with) -> commands 
		execute(me, [
			if(will_be_dead(dmg),
				handle_death(collide_with)
			),
			
			add(me.hitpoints,  -dmg),
			
			// Ensure that the damage types don't go over their limits
			if(me.shadow_time + collide_with.cSHADOW_DAMAGE > cMAX_DMG_STATUS_TIME,
				set(me.shadow_time, cMAX_DMG_STATUS_TIME),
				add(me.shadow_time, collide_with.cSHADOW_DAMAGE)
			),
			if(me.pierce_time + collide_with.cPIERCE_DAMAGE > cMAX_DMG_STATUS_TIME,			
				set(me.pierce_time, cMAX_DMG_STATUS_TIME),
				add(me.pierce_time, collide_with.cPIERCE_DAMAGE)
			),
			if(me.energy - collide_with.cELEMENTAL_DAMAGE > 0,
				add(me.energy, -collide_with.cELEMENTAL_DAMAGE),
				set(me.energy, 0)
			),
			
			display_hurt_visuals(collide_with, dmg),
			player_damage_response(collide_with.cDAMAGE_TYPE,dmg)
		]) where dmg = final_damage_amount(collide_with, cATTACK_DAMAGE_amount)
		   where cATTACK_DAMAGE_amount = if(    (me is obj player_controlled)
		   								and collide_with.cATTACK_DAMAGE_TO_PLAYER,
		   	collide_with.cATTACK_DAMAGE_TO_PLAYER,
		   	collide_with.cATTACK_DAMAGE
		   )
	",

	handle_knockback: "def(obj hittable collide_with) -> commands 
		if(cBULK != 0, [
			execute(me,
					add(velocity_x,
						collide_with.facing * collide_with.cATTACK_KNOCKBACK_X/me.cBULK
					)
			),
			execute(me,
					add(velocity_y,
						collide_with.cATTACK_KNOCKBACK_Y/me.cBULK)
			)
		])
	",

	custom_damage_table: "
		{neutral : decimal,
		 fire    : decimal,
		 energy  : decimal,
		 acid    : decimal,
		 impact  : decimal,
		 lacerate: decimal
		} ::
			{   neutral: 1.0,
				fire: 1.0,
				energy: 1.0,
				acid: 1.0,
				impact: 1.0,
				lacerate: 1.0
			}
	",

	damage_tables: "
		{ string ->
			{neutral : decimal,
			 fire    : decimal,
			 energy  : decimal,
			 acid    : decimal,
			 impact  : decimal,
			 lacerate: decimal}
			} ::
		   {'bug'		 : {neutral: 1.0,
							 fire: 0.75,
							 energy: 1.0,
							 acid: 1.25,
							 impact: 2.0,
							 lacerate: 0.25
							 },
			'mechanical'  : {neutral: 1.0,
							 fire: 0.0,
							 energy: 1.0,
							 acid: 1.5,
							 impact: 0.5,
							 lacerate: 0.0
							 },	//Full list in Frogatto's damage tables
		   }
	",
										
# death
	handle_death: "def(interface {cDAMAGE_TYPE: string} collide_with) -> commands [
		null,
	]",

# invincibility
	is_invincible_posthit: "bool ::
		if(time_last_hit
		 and (abs(time_last_hit - level.cycle) < cPOSTHIT_INVINCIBILITY_PERIOD),
			true,
			false
		)
	",
	
	is_invincible: "bool ::
		if(invincible or level.in_dialog
		 or is_invincible_posthit,
		 	true,
		 	false
		)
	",

# ELEM: healing
// TODO: Make this percentage based	
	heal: "def(int heal_amount) -> commands
		execute(me,
			if(hitpoints + heal_amount >= max_hitpoints - shadow_time,
				set(hitpoints, max_hitpoints - shadow_time),
				set(hitpoints, hitpoints + heal_amount)
			)
		)
	",
	
#-------------------------- item drop logic --------------------------#
	drop_item_list: "{string -> int} :: sans_undroppables(_drop_item_list)",
	drop_item_weights: "{string -> int} :: sans_undroppables(_drop_item_weights)",
	_drop_item_list: "{string -> int} :: {'heart_object' : 10, 'mana_cube' : 7}",
	_drop_item_weights: "{string -> int} :: {'heart_object' : 30, 'mana_cube' : 70}",
	drop_item_validity: "{string -> bool} ::
		{'heart_object' :
		(not level.player.hitpoints = level.player.max_hitpoints), 'mana_cube' : true }",
	acquirable_item_drop_value: "int :: 0",  // how many of the dropped items the
											 // dying monster/thing is worth.
	sans_undroppables: "def({string -> int} source) ->
		{string -> int} filter(source, drop_item_validity[key])",
	

		//unused but useful reference
	choose_drop_item_nonweighted: "string :: choose(keys(drop_item_list))",
	choose_drop_item_weighted: "string ::
		search_drop_list(drop_item_weights,
						 0,
						 0,
						 1d(sum(values(drop_item_weights)))
		)
	",
	
	search_drop_list: "def(
	  {string -> int} thelist,int i, int tally, int target_val) -> string
		if(tally >= target_val,
			keys(thelist)[i-1],
			search_drop_list( thelist, i+1, tally + values(thelist)[i], target_val)
		)
	",

	calculate_drop_items: "def(int value_cLEFT, [string] toBeDropped) -> [string]
		if( anything_can_still_be_dropped,
			calculate_drop_items(value_cLEFT - drop_item_list[picked], toBeDropped + [picked]),
			toBeDropped
		) where picked = choose_drop_item_weighted
		  where anything_can_still_be_dropped =
		  	(find(values(drop_item_list),value <= value_cLEFT) != null)
	",
	
	drop_acquirable_items: "def() -> commands
		if((not higher_difficulty) or 1d4=4,
			map(calculate_drop_items(me.acquirable_item_drop_value,[]),
				spawn(value,
					  me.mid_x,
				 	 me.y,
					  me.facing,
					  [set(child.velocity_x, velocity_x/6 +1d600-300),
					   set(child.velocity_y, velocity_y/6)]
				)
			)
		)
	",

	
#-------------------------- cosmetic functions --------------------------#
	play_grabbed_cosmetics: "commands :: [play_hurt_sounds('neutral',1)]",

	display_hurt_visuals: "def(
	  interface {cDAMAGE_TYPE: string} collide_with,
	  int amount
	) -> commands
		execute(me,
				[play_hurt_sounds(collide_with.cDAMAGE_TYPE, amount),
				 if(amount > 0, hurt_flash_sequence, invincible_flash_sequence)]
		)
	",

	invincible_flash_sequence: "commands ::	[	flash_blue,
												schedule(5, flash_off),
												schedule(6, flash_blue),
												schedule(8, flash_off)]",

	hurt_flash_sequence: "commands	::	[	flash_bright,
											schedule(3, flash_red),
											schedule(6, flash_bright),
											schedule(9, flash_red),
											schedule(12, flash_bright),
											schedule(15, flash_off)]",
	

	/* these should be the material-interaction sounds of an object being
	 * damaged; wood crunching, flesh squishing, glass breaking, etc.
	 * A certain material will make different noise depending on what hurts it,
	 * and that's what this handles - wood burning is a very different sound from
	 * wood being crushed.  By default we provide a set of sounds for fleshy
	 * objects. */
	play_hurt_sounds: "def(string cDAMAGE_TYPE, decimal damage_amount) -> commands [
		if(play_object_specific_hurt_sounds(cDAMAGE_TYPE, damage_amount) != null,
			play_object_specific_hurt_sounds(cDAMAGE_TYPE, damage_amount),
			if(damage_amount > 0,
				switch(cDAMAGE_TYPE,
					'bite', sound('hurt-bite.wav'),
					'stab', sound('hurt-stab'+1d2+'.wav'),
					'slash', sound('hurt-slash'+1d3+'.wav'),
					'organic-bludgeon', sound('hurt-organic-bludgeon.wav'),
					'neutral', null,
					'electricity', sound('hurt-electricity.wav', 0.5)
				),
				switch(me.cTAXONOMY,
					'plant', sound('resist-plant.wav'),
					'neutral', null
				),
			)
		),
		if(should_play_pain_sfx, 
			[play_object_specific_pain_vocalization(cDAMAGE_TYPE, damage_amount),
			 set(_last_played_pain_sfx,level.cycle)]
		)
	] where should_play_pain_sfx = (level.cycle >= (_last_played_pain_sfx + 28))",
								
	//override this to allow an object to have its own specific material sounds
	play_object_specific_hurt_sounds: "
	  def(string cDAMAGE_TYPE, damage_amount) -> commands
		switch(cDAMAGE_TYPE, 
			'neutral', null,
			null
		)
	",
	
	//generally speaking, these sounds should not differ between damage types.
	// If a creature yelps in pain, it should always sound the same.  We might
	// want it to be a matter of magnitude, though.						
	play_object_specific_pain_vocalization: "
		def(string cDAMAGE_TYPE, damage_amount) -> commands null
	",
	
	display_posthit_invincibility_flash_sequence: "def() -> commands
		if(cPOSTHIT_INVINCIBILITY_PERIOD,
			map(range(me.cPOSTHIT_INVINCIBILITY_PERIOD/2),
				'step',
				schedule(step*2, if(step%2=0,
					set(me.alpha,50),
					set(me.alpha,255)
					)
				)
			)
		)
	",
	
	flash_bright: "commands :: [
		set(me.brightness, 1023)]",
	flash_blue: "commands :: [
		set(me.red, 50),
		set(me.green, 50),
		set(me.blue, 175)]",
	flash_red: "commands :: [
		set(me.red, 255),
		set(me.green, 100),
		set(me.blue, 100)]",
	flash_off: "commands :: [
		set(me.brightness, 255),
		set(me.red, 255),
		set(me.green, 255),
		set(me.blue, 255)]",	
	
	death_effects: "def(string type) -> commands

			switch(type,
					'none', null,  //for creatures that want to die without showing anything
			)",
	
#-------------------------- sfx for material-interactions --------------------------#
 //  Twist around the data structure, so that each tile mnemonic is the key to
 //  a list of keys to the lists it's in.
	tile_tags: "{string -> string} ::
		fold(
			map(flatten(values(tags)), 'tla',
				{(tla): string <- find(keys(tags), 'key', tla in tags[key])} ),
			a+b
		) where tags = {
			'wood': 		['fbr','acn','act','ast','isb','fnt','int',],
			'foliage':		['ngs',],
			'dirt':			['nrk','frg',],
			'stone':		['crk','dbk','cbk',],
			'wood_solid':	['ins','tnk',],
			'metal':		['ppl','dsb',],
		}",
		
	object_tags: "[string] :: 
		if(material_tag is [string],
			material_tag,
			['default']
		) where material_tag =
			filter([standing_on and standing_on['cMATERIAL_SOUND']], value)
	",
	
	tags_on: "[string] ::
		   object_tags
		or unique(
			filter(
				map(tiles_at(midpoint_x, y+img_h+1), tile_tags[value.id]),
			value)
		)
	",
	
	tagged_sfx: "def(string action) -> [{keys : [string], sound : commands}]
		switch(action,
			'slide', [
				{keys: ['wood'],	  sound: null},
				{keys: ['foliage'],	sound: null},
			],
			'jump', [
				{keys: ['wood'],	  sound: null},
				{keys: ['foliage'],	sound: null},
			],
			'footfall', [
				{keys: ['wood'],	  sound: null},
				{keys: ['foliage'],	sound: null},
			]
		)
	",


	choose_sfx: "def(string action) -> commands
		if(snd, snd.sound)
			where snd = {keys: [string], sound: commands}
				<- find(sfx, 'effect',
					find(tags + ['default'], 'tag', tag in effect.keys)
				) where sfx = tagged_sfx(action), tags = tags_on
	",
		
			
#--------------------------  vars --------------------------#
	time_last_hit: { type: "int", default: 0, persistent: false },
	attributes: { type: "{string->string}", default: {}, persistent: false }, 

#-------------------------- temporary vars --------------------------#

	_in_solidity_fail: { type: "bool", default: false, persistent: false },
	
	_last_played_pain_sfx: { type: "int", default: 0, persistent: false },
							
},

#-------------------------- collision event handling --------------------------#
	on_start_level: "if(level.cycle < time_last_hit, set(time_last_hit, 0))",

	on_outside_level: "[
		if(y > level.dimensions[3] and unless_we_shouldnt, add(hitpoints,-1))
	] where unless_we_shouldnt =
		if(level.player is obj player_controlled_platformer_character,
			not (level.player.exempt_from_dying_whilst_falling_rules_for_a_cutscene
				 or level.player.exempt_from_dying_whilst_falling_due_to_level_portals),
			true
		)
	",


	/* this is meant to ensure we don't take multple instances of damage from a
	 * damage type that's a "stream" in a single frame.  If we get hit, we check
	 * for other collisions with the same kind of shot, and only take damage from
	 * the first one. */
	/* we double-check it's the same collide-with area, because we DO want
	 * multiple collisions from an object for each different area; we use this
	 * on e.g. the milgram-pod to allow it to be shot out of the air by the
	 * player (needs a body area and a thrown area during the thrown anim,
	 * rather than the usual "only the thrown area" for player-spat objects).
	 * This mechanism may be the ideal place to check for 'cARMORed regions' on
	 * an otherwise vulnerable creature; check if we're getting a collision on
	 * both the body and the cARMOR. */
	/*TODO:  this may be unwanted on shots without a cooldown, where a "shotgun"
	 * effect of multiple hits is desired.*/
on_collide_object_body: "
	if(arg.collide_with is obj hittable,
		if(not find(
				filter(arg.all_collisions,
						value.collide_with.type = arg.collide_with.type
						and value.collide_with_area = arg.collide_with_area),
				value.collision_index < arg.collision_index), // end find()
			process_collision	// true of if(not find()...)
		) where process_collision =
			if(  arg.collide_with.cTEAM != cTEAM
			 and not cTEAM in arg.collide_with.cTEAMS_WHICH_I_CANNOT_HURT
			 and arg.collide_with.cTEAM != 'evil_harmless'
			 and not (arg.collide_with.cTEAM = 'evil' and cTEAM = 'evil_harmless'),
			 	if(arg.collide_with_area in ['attack','thrown'],
			 		get_hit_by(arg.collide_with)
		 		)	// end if(arg.collide_with_area in ['attack','thrown'])
			)	// end if(arg.collide_with.cTEAM != cTEAM)
	)
",
		
		//Originally before 'where process collision = ...
		/*  two special exceptions here besides the 'no friendly-fire' rule;
		 * evil_harmless is a special cTEAM for thrown enemies wherein they can't
		 * hurt anyone, regardless of the target's cTEAM, but also - stuff from
		 * cTEAM 'evil' won't friendly-fire them.  They can and will be hurt by
		 * any player actions, though, and any traps/neutral damage sources. */
		 
#-------------------------- error condition handling --------------------------#
on_change_solid_dimensions_fail: "fire_event('solidity_fail')",
on_change_animation_failure: "fire_event('solidity_fail')",

# if the level starts, and we're embedded in solid stuff, try moving upwards to get out of it.
# this should catch any errors introduced by changes to solid area or handling thereof
on_solidity_fail: "
	if(_in_solidity_fail,
		die(),
		[set(_in_solidity_fail, true),
		 resolve_solid(me),
		 set(_in_solidity_fail, false)]
	)
",

on_add_object_fail: "
	if(  collide_with is obj hittable
	 and collide_with.cTEAM != cTEAM
	 and collide_with.get_hit_by,
		collide_with.get_hit_by(me),
		die()
	) where collide_with = arg.collide_with
",

on_collide_feet: "[
	if( arg.collide_with is obj hittable and
		arg.collide_with.cIS_BOUNCY,
			[set(me.velocity_x, arg.collide_with.cBOUNCE_VELOCITY_X),
			 set(me.velocity_y, arg.collide_with.cBOUNCE_VELOCITY_Y)]
	),
]",

on_bookkeep: "
	if (cycle % cSTATUS_TICK_FREQ = 0, [
	
		// Handle Piercing
		if(delta_x > cPIERCE_MOVE_DEADZONE and pierce_time > 0,
			if(speed_drop + cSPEED_DROP_PER_STEP > cMAX_SPEED_DROP,
				set(speed_drop, cMAX_SPEED_DROP),
				add(speed_drop, cSPEED_DROP_PER_STEP)
			),
			set(speed_drop, decimal_sub(speed_drop,  cSPEED_DROP_DECAY_RATE))
		) where delta_x = abs(midpoint_x - old_midpoint_x),
		
		set(pierce_time, sub(pierce_time, cPIERCE_DECAY_RATE)),
		set(old_midpoint_x, me.midpoint_x),
		
		//debug(pierce_time,speed_drop),
		
		// Handle Shadow
		set(shadow_time, sub(shadow_time, cSHADOW_DECAY_RATE)),
	
		// Handle Mist Energy
		if(energy < cMAX_ENERGY,
			add(energy, cENERGY_REGEN_RATE),
			set(energy, cMAX_ENERGY)
		),
	])
",

}
