/*
 building off of 'throwable', this prototype makes an enemy which can be thrown like an ant, and has the same 'recovery from being thrown' where it sits and twitches on the ground briefly before hopping upwards again.
 to conform to this prototype, an object needs to:
 - specify a thrown animation with a thrown-area that covers the whole of the object, and with no body area.
 - specify an on_back animation with regular body area
 - an animation specified in 'consts' which it will revert to after recovering 
*/

{
id: "throwable_small_enemy",
prototype: ["throwable"],
mass: 5,
friction: 1000,
traction: 1000,
solid_area: [5,10,20,25],
solid_dimensions: ["enemy","common"],
properties: {
	swallowable: "bool :: true",

	team: "string :: if(velocity_x != 0 or velocity_y != 0, if(time_spat != null, 'player','evil'), 'evil_harmless')",
	hurt_velocity_y: "int :: -400",
	hurt_velocity_x: "int :: 200",
	attack_damage: "int :: if(animation in ['thrown'], standard_thrown_damage, 1)",
		
	on_back_duration: "int :: 200",  #if we're re-running the thrown animation.
	default_solid_dimensions: "[string] :: ['enemy','common']",
	default_anim: "string :: 'stand'",
	basic_type: "string :: regex_replace(me.type,'.thrown','')", 
	frogourmet_tag: "string :: basic_type",
	springiness: "int :: 190",
	spring_amount: "int :: 1200",
	bounce_roundness: "int :: 10",
},


#-------------------------- gets fired by frogatto immediately after the creature is launched --------------------------#
on_spat: "[proto_event('throwable','spat'),set(_on_back_count, 0)]",

#-------------------------- handle turning back to a regular object --------------------------#
						
on_return_to_normal: "	[	remove_object(me),
							add_object(restored_enemy),
						] where restored_enemy = object(basic_type, mid_x, mid_y, {facing: facing, hitpoints: hitpoints, velocity_y: velocity_y - 600})",					
						
on_die: "	[	remove_object(me),
				add_object(restored_enemy),
				fire_event(restored_enemy,'force_death'),
			] where restored_enemy = object(basic_type, mid_x, mid_y, {facing: facing, hitpoints: 1})",					


#-------------------------- handle on_back twitching --------------------------#
on_process_on_back: "[add(_on_back_count,1),if(_on_back_count > (on_back_duration*3)/4, set(brightness, if(cycle%6 > 2, 256, 512)))]",
on_enter_on_back_anim: "[set(me.solid_dimensions_in, default_solid_dimensions)]",

#-------------------------- handle collisions during thrown animations --------------------------#
on_collide_head: "[set(velocity_y, -velocity_y/2), if(abs(velocity_y) >1000, impact_cloud(midpoint_x,y,'large'), if(abs(velocity_y) >30, impact_cloud(midpoint_x,y,'small')))]",

on_collide_side: "[set(velocity_x, -velocity_x/2), if(abs(velocity_x) >1000, impact_cloud(midpoint_x,y2,'large'), if(abs(velocity_x) >30, impact_cloud(midpoint_x,y2,'small')))]",
on_collide_feet: "[	set(rotate, slope_standing_on), set(juggled, 0),
						if(abs(velocity_y) >1000,
							impact_cloud(midpoint_x,y2,'large'),
							if(abs(velocity_y) >100,
								impact_cloud(midpoint_x,y2,'small'))),
						
						if(animation = 'thrown',
							if(velocity_y + abs(velocity_x) > 600,
								[set(velocity_y, -(velocity_y*3)/5 - (velocity_x*slope_standing_on)/90), set(velocity_x, (velocity_x*4)/5 + (velocity_y*slope_standing_on)/90)],
								[set(_on_back_count, 0), if('on_back' in available_animations, animation('on_back'))])),
						if(arg.collide_with != null, 
							if(arg.collide_with is obj hittable,
								if(collide_with.get_hit_by != null and arg.collide_with_area != null, if(team_condition(collide_with, arg.collide_with_area), [collide_with.get_hit_by(me), die()])) where collide_with = obj hittable <- arg.collide_with))] 
							",
on_bounced_on: "if(animation = 'on_back', die())",
on_end_anim: "if(_on_back_count > on_back_duration, fire_event('return_to_normal'), if(is_standing and 'on_back' in available_animations, animation('on_back'), animation(animation)))",
on_enter_water: "[set(type,basic_type), animation(default_anim), fire_event('enter_water')]",


animation: [
	{
		accel_x: 0,
		accel_y: 80,
		pad: 3,
		id: "thrown",
		thrown_area: "all",
		duration: 60,
		frames: 1,
		body_area: ["solid","all"],
	},
	{
		accel_x: 0,
		accel_y: 80,
		pad: 3,
		id: "on_back",
		frames: 2,
		duration: 5,
		body_area: ["solid","all"],
	},
],
}
