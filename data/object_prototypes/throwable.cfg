{
id: "throwable",
prototype: ["hittable"],
properties: {
	swallowable: "bool :: true",
	is_player_ammo: "bool :: false",
		
		#two special exceptions here besides the 'no friendly-fire' rule;  evil_harmless is a special team for thrown enemies wherein they can't hurt anyone, regardless of the target's team, but also - stuff from team 'evil' won't friendly-fire them.  They can and will be hurt by any player actions, though, and any traps/neutral damage sources.
	team_condition: "def(obj hittable collide_with, string collide_with_area) -> bool ((collide_with_area in ['body', 'armored'] and team != 'evil_harmless' and collide_with.team != team) and (not (team = 'evil' and collide_with.team = 'evil_harmless')))",
	damage_type: "string :: 'impact'",
	damage_cooldown: "int :: 20",

	carry_gravity: "int :: 0",  // carried objects can cause the player to be burdened down, or even to become lighter than normal

	goes_through_enemy_shots: "bool :: true",
	thrown_type: "string :: me.type",
	set_to_animation: "def(string name) -> commands set(animation, name)",
	
	#-------------------------- vars --------------------------#
	time_last_bounced: { type: "int", default: 0, persistent: false }, 
	time_spat: { type: "int|null", default: null, persistent: false }, 
	juggled: { type: "int", default: 0, persistent: false }, 
	_on_back_count: { type: "int", default: 0, persistent: false },
	cycle_thrown_anim: { type: "int", default: 0, persistent: false },

	in_change_dimensions_fail: { type: "int", default: 0, persistent: false}, 
},


#-------------------------- gets fired by frogatto immediately after the creature is launched --------------------------#
on_spat: "[set(rotate, 0),set(time_spat,level.cycle), add(juggled, 1),set(brightness, 255)]",

#-------------------------- handle collisions --------------------------#
on_collide_object_thrown: "if(arg.collide_with != null and arg.collide_with is obj hittable, (if(not  find(   filter(arg.all_collisions, value.collide_with.type = collide_with.type and value.collide_with_area = arg.collide_with_area), value.collision_index < arg.collision_index), process_collision))

		where process_collision = if(team_condition(collide_with, arg.collide_with_area), [
			//if it is an enemy shot, try to block it
			if(collide_with.is_a_shot and (not collide_with.goes_through_enemy_shots), [collide_with.get_hit_by(me)]),

			//go ahead and receive collision damage, unless we're hitting an enemy shot.  If we are, get hit by it unless we're flagged to go through enemy shots
			if((collide_with.is_a_shot and (not me.goes_through_enemy_shots)) or (not collide_with.is_a_shot),
				if( (sourceless_damage_cooldown < (level.cycle - time_last_hit)),
				[impact_cloud(midpoint_x,y,'large'), elastic_collision(collide_with, {multiplier: 0.5, constraint: {min: 500, max: 1500} } ), me.get_hit_sourceless('impact',standard_thrown_damage),set(time_last_hit, level.cycle)]) )
			
			]) where collide_with = obj hittable <- arg.collide_with)",

on_been_grabbed: "",

#-------------------------- handle damage --------------------------#
on_collide_damage: "die()",


#-------------------------- handle error conditions --------------------------#
on_stuck: "if(not solid(level, midpoint_x, y+self.img_h-10), add(velocity_y, -1200), add(velocity_x, 1d600-300))",

	// instead of dying if they collide with frogatto/others right away, give them a brief chance to get kicked out of the way.  The former concerns associated with instadying are still dealt with because if the player does entrap them and deliberately cause this, they still cause damage.
on_change_solid_dimensions_fail: "if(in_change_dimensions_fail > 15 or (not collide_with), die(),
	          [add(in_change_dimensions_fail, 1),
			   add(velocity_x,if(collide_with.midpoint_x > midpoint_x, -500,500))
			  ]) where collide_with = obj hittable <- arg.collide_with",
			  
on_change_animation_failure: "[die()]",
on_add_object_fail: "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()] where collide_with = obj hittable <- arg.collide_with",

}
