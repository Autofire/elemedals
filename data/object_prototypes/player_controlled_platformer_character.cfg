#Originates from Frogatto

{
id: "player_controlled_platformer_character",
solid_dimensions: ["player","common","boss"],
vehicle: false,
is_human: true,
prototype: ["player_controlled"],
collide_dimensions: ["player","enemy","hazard","item"],

properties: {
	cHURT_VELOCITY_Y: "-800",
	cHURT_VELOCITY_X: "0",

	can_jump: "def() -> bool
	  bool(bool(is_standing) and (not animation in ['interact', 'fall', 'jump', 'start_jump']))",

	scripted_move_to_x: "def(int target_x, int target_facing, commands callback) -> commands [
		set(me.scripted_target_x, target_x),
		set(me.scripted_target_facing, target_facing),
		set(me.scripted_move_callback, callback),
		fire_event(me, 'handle_move_script'),
	]",
	
	do_heartbeat_screen_flash: "if(me.hitpoints <= low_hp_cap and me.hitpoints > 0,
									if(cycle % 80 = 0 or (25 + cycle) % 80 = 0, heartbeat_screen_flash(magnitude) ))
										where magnitude = trail_off * (1 - (me.hitpoints - 1)/low_hp_cap) //the -1 makes it so it's always at 100% at 1hp.
										where trail_off = lib.math.constrain(0.2, (1-(me.cycle - last_got_hurt_for_heartbeat_fx)/3500.0), 1.0)
										where low_hp_cap = max_hitpoints/2.5",		//start flashing around 2/5 health.
	heartbeat_screen_flash: "def(decimal magnitude) -> commands [
								if(cycle % 80 = 0, sound('heartbeat-tick.wav',magnitude)),
								if((25 + cycle) % 80 = 0, sound('heartbeat-tock.wav',magnitude)),
								screen_flash([255, 0, 0,0], [255, 0, 0,lib.math.round(6*magnitude)], 16),
								schedule(16, screen_flash([255, 0, 0,lib.math.round(96*magnitude)], [255, 0, 0,-lib.math.round(6*magnitude)], 16) )]",
	
	//screen_flash(color, delta, duration):  flashes the screen the given color, and keeps the flash going for duration cycles. If delta is given, the color of the flash will be changed every cycle until the duration expires.
	player_damage_screen_flash: "def(int damage_amounts) -> commands
		if(damage_amounts > 2 or damage_amounts >= hitpoints, 
			screen_flash([255, 0, 0,255], [255, 0, 0,0], 4),  
			if(damage_amounts = 2, 
				screen_flash([255, 0, 0,200], [255, 0, 0,0], 3), 
				screen_flash([255, 0, 0,70], [255, 0, 0,0], 2)))",
	
	character_specific_damage_response: "def(string cDAMAGE_TYPE, int amount) -> commands null",
	
	player_damage_response: "def(string cDAMAGE_TYPE, int amount) -> commands [
		set(last_got_hurt_for_heartbeat_fx, cycle),
		play_haptic_effect('rumble'),
		player_damage_screen_flash(amount),
		set(solid_dimensions_in, ['player']),
		character_specific_damage_response(cDAMAGE_TYPE, amount)
	]",
	
	
	cPOSTHIT_INVINCIBILITY_PERIOD: "int :: 100",
	
#-------------------------- vars --------------------------#

	scripted_target_x: { type: "int|null", default: null },
	scripted_target_facing: { type: "int|null", default: null },
	scripted_move_callback: { type: "commands", default: null },

#-------------------------- temporary vars --------------------------#

	last_got_hurt_for_heartbeat_fx: { type: "int", default: 0, persistent: false },  //use a separate counter for this because we want it to persist across levels + not interfere with other baked-in behavior for last_hit
	_last_standing_cycle: { type: "int", default: -1, persistent: false },
	cLEFT: 0,
	cRIGHT: 0,
	lookup_time:{ type: "int", default: 0, persistent: false },
	lookdown_time: { type: "int", default: 0, persistent: false },
	fired_talk: { type: "int", default: 0, persistent: false },
	talking_to: { type: "custom_obj|null", default: null, persistent: false },
	interacting_with:  { type: "custom_obj|null", default: null, persistent: false },
	exempt_from_dying_whilst_falling_rules_for_a_cutscene: { type: "bool", default: false, persistent: false },
	exempt_from_dying_whilst_falling_due_to_level_portals: "bool :: size(filter(level.active_chars, value is obj invisible_level_portal and value.player_is_inside_bounds = true)) > 0",
},

on_process: "do_heartbeat_screen_flash",

on_enter_level: "set(exempt_from_dying_whilst_falling_rules_for_a_cutscene, false)",
on_end_hurt_anim: "animation('stand')",

on_handle_move_script: "
	if(abs(midpoint_x - scripted_target_x) < 10,
		if(abs(scripted_target_facing) = 1 and facing != scripted_target_facing, [
			set(control_lock, if(scripted_target_facing > 0, ['ctrl_right'], ['ctrl_left'])), 
			schedule(1, fire_event('handle_move_script')),
		],[
			set(control_lock, null),
			set(me.scripted_target_x, null),
			set(me.scripted_target_facing, null),
			set(me.scripted_move_callback, null),
			scripted_move_callback,
		]),
	[
		set(control_lock, if(scripted_target_x > midpoint_x, ['ctrl_right'], ['ctrl_left'])), 
		schedule(1, fire_event('handle_move_script')),
	])	asserting scripted_target_x is int
		asserting scripted_target_facing is int",

timer_frequency: 2,
on_timer: "[
	//Handle ending of invincibility.
	if((level.cycle - time_last_hit)/2 <= 50 and (level.cycle - time_last_hit)/2 > 1,
		set(solid_dimensions_in, ['player', 'common', 'boss'])),
	if(not is_invincible_posthit, set(alpha,255)),
]",
			
on_ctrl_jump: "if(can_jump(), [
	if(not ctrl_down, [
		if('start_jump' in available_animations, animation('start_jump'), animation('jump')),
		add(velocity_x, velocity_x),
		set(velocity_y, -jumpPower)
	]),
	
	if(is_standing_on_platform,
		if(ctrl_down,
			[set(fall_through_platforms, 10),
			set(velocity_y, velocity_y + jumpPower/10)]
		)
	),
])",
		
on_ctrl_up: "
	if(abs(velocity_x) < 100 and is_standing, 
		map(
				filter(level.active_chars, 'char', collides(context.me, 'body', char, 'interact')), 
				'obj', [
			set(interacting_with, obj),
			fire_event(obj, 'interact')
		])
	)",
	
on_start_interact: "[
	animation('interact'), 
	set(fired_talk, 0),
]",

on_interacting: "if(interacting_with and fired_talk = 0, [
	set(fired_talk, 1), 
	fire_event(interacting_with, 'talk'),
])",

on_end_interact_anim: "animation('stand')",

#-------------------------- error condition handling --------------------------#
//if the player gets 'stuck' in a narrow gap, this gets them out by automatically making them jump
on_stuck: "if(not underwater, 
	if(not solid(level, midpoint_x, y+self.img_h-10), 
		add(velocity_y, -jumpPower), 
		add(velocity_x, if(facing=1, 300, -300))))",

//if we change our solid dimensions -- i.e. try to come back from being hurt, and we can't because we're on top of another solid object, then we take more damage
on_change_solid_dimensions_fail: "if(not is_invincible_posthit, [
	add(hitpoints, -1), 
	set(time_last_hit, level.cycle),
])",

#-------------------------- damage handling --------------------------#

on_collide_damage: "[get_hit_sourceless('stab', int(arg.surface_damage)), cause_flinch(null)]",

//when falling, if we are standing for two consecutive frames, change us to a standing animation.
on_process_fall: "
	if(is_standing, 
		if(_last_standing_cycle = cycle-1, 
			animation('stand'), 
			set(_last_standing_cycle, cycle)))",

// Fpollowing code has been commented out because it would never be used,
// and it was causing the game to crash.
//check if we end up on a slope in which case we re-calculate our standing.
//on_enter_stand_anim: "if(abs(slope_standing_on) > 20, start_standing)",
//on_enter_stand_up_slope_anim: "if(slope_standing_on*facing > -20, start_standing)",
//on_enter_stand_down_slope_anim: "if(slope_standing_on*facing < 20, start_standing)",
}
