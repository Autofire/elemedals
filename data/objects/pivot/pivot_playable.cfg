# Pivot
# Main player.
# TODO:
# Give Pivot a turn animation (Will not interfere with other actions)
# Fix flinch-during-jump
# Fix damage hitboxes while running

{
on_enter_hurt_anim: "debug(['HP: ',hitpoints - 1])",

id: "pivot_playable",
prototype: ["player_controlled_platformer_character"],
editor_info: { category: "player" },
solid_dimensions: ["player","common","boss"],
collide_dimensions: ["common","enemy","boss","hazard"],
vehicle: false,
hitpoints: 30,
mass: 5,
is_human: true,
friction: 2200,
traction_in_air: 100,
traction_in_water: 1000,
feet_width: 5,
zorder: "@include data/zorder.cfg:player",

properties: {
	flinch_threshold: 0,
	hurt_velocity_y: "-1100",
	hurt_velocity_x: "250",
	team: "'player'",
	left: -1,
	right: 1,
	
	base_runspeed: "int :: 190",
	jumpticks:  { type: "int", default: 0 },
	airspeed:   { type: "int", default: 30 },
	jump_power: { type: "int", default: -1800 },
	cycle_of_last_up: 	{ type: "int", default: 0 },	
	cycle_of_last_attack: { type: "int", default: 0 },
	
	attack_damage: "5",
	damage_cooldown: "-1",
	
	// Equipment -- These will change often throughout the game
	sword: { type: "string", default: 'calibur' },
	
	minor_attack_num: "if(anim_number = null, 1, anim_number)",
	
	# -- gui -- #
	gui_heart_display: {
		type: "obj heart_display",
		init: "object('heart_display', 27+0, 27+0, {})",
		persistent: false,
	},
	
	set_up_gui: "def() -> commands [
		map(components,
			'gui_element', [
				remove_object(gui_element),
				add_object(gui_element),
			]
		) where components = [gui_heart_display]
	]",


	# -- functions -- #
	// str_to_int only checks one number
	str_to_int: "def(string input) -> int|null
		if(input in numbers, int(input), null)
			where numbers = ['1','2','3','4','5','6','7','8','9','0']
	",
	
	anim_suffix: "animation[size(animation) - 3 :]",
	
	grounded_anim: "bool :: bool(
		self.animation in ['stand', 'run']
		or in_end_anim
	)",
	
	// Make a list of our sword animations based upon our
	// equipped sword
	sword_anim: "bool :: bool(self.animation in
		map(['1','2','3'], sword+value)
	)",
	
	in_end_anim: "bool :: anim_suffix = 'End'",
	
	anim_number: "int|null ::
		if(in_end_anim,	// If we have a suffix, skip by it
				str_to_int(string <- animation[size(animation) - 4]),
				str_to_int(string <- animation[size(animation) - 1])
			)
		",
		
	controllable_anim: "bool :: bool(
		self.animation in ['stand', 'run', 'jump', 'beginFall', 'fall']
		or in_end_anim
	)",
	 
	can_turn: "bool :: bool(not sword_anim)",
	
	turn: "def(int newdir) -> commands
		if(newdir != facing and can_turn, set(facing, newdir))",
	
	// Overloading (from hittable) because we want to flinch in air
	handle_flinch: "def(obj hittable collide_with) -> commands
		execute(me,
			if(final_damage_amount(collide_with, collide_with.attack_damage) >= flinch_threshold,
				cause_flinch(collide_with))
	)",
},

#ANIMATION HANDLES#
on_create: "[animation('stand'), set_up_gui()]",
on_collide_feet: "if(animation not in ['calibur1','hurt'], animation('stand'))",

# -- stuff that is related to the player's input follows
on_process: "[fire_event('bookkeep'),
	if(     (ctrl_left or ctrl_right)
		and (animation = 'stand' or in_end_anim),
			set(animation, 'run')),
		
	if(ctrl_left  and not sword_anim, [
		if(can_turn, turn(left)),
		if(is_standing, add(velocity_x, -runspeed), add(velocity_x, -airspeed))]),
					
	if(ctrl_right and not sword_anim, [
		if(can_turn, turn(right)),
		if(is_standing, add(velocity_x, runspeed), add(velocity_x, airspeed))]),
	
	//debug(time_in_animation),
#		if(grounded_anim and (not is_standing), animation('beginFall')),#
			]",

on_process_stand: "if(
	not is_standing,
		animation('beginFall')
)",			
on_process_run: "if(
	not (ctrl_left or ctrl_right),
		animation('stand'),
	not is_standing,
		animation('beginFall')
)",
on_end_stand_anim: "animation('stand')",
on_end_run_anim:   "animation('run')",
on_end_hurt_anim: "animation('beginFall')",

# -- Jumping and falling -- #
on_ctrl_jump: "if(is_standing and grounded_anim,
				[animation('jump'), add(velocity_y, jump_power)]
				)",
				
on_process_jump: "if(not ctrl_jump, [
				if(velocity_y < 0, set(velocity_y, -200)),
				animation('beginFall')],
				
				velocity_y >= 0, animation('beginFall'),
				
				add(velocity_y, -20)
				)",
				
on_end_beginFall_anim: "[animation('fall')]",

# -- General attacks -- #
on_ctrl_tongue: "[set(cycle_of_last_attack, cycle),
	if(controllable_anim, [
		if(in_end_anim
		 and anim_number != null
		 and sword + (anim_number + 1) in available_animations,
		 	animation(sword + (anim_number + 1)),
		 	[animation(sword + '1'),
		 	 add(major_attack_num, 1)]
		)
	])
]",

on_ctrl_attack: "spawn('bomb_blast', 30, 0, facing)",

on_end_anim: "
	if( animation + 'End' in available_animations,
			animation(animation + 'End'),
		in_end_anim,
			animation('stand')
	)",

#ANIMATIONS#
animation: [
	{
		id: "stand",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [2, 2, 22, 33],
		solid_area: [3,5,18,30],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
		accel_y: 80,
		accel_x: 0,
	},
	
	{
		id: "run",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [32, 2, 58, 33],
		solid_area: [6,5,21,30],
		frames: 4,
		frames_per_row: 4,
		pad: 3,
		duration: 8,
		accel_y: 80,
		accel_x: 0,
	},
	
	{
		id: "jump",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [2, 38, 22, 69],
		solid_area: [2,3,17,28],
		frames: 1,
		duration: 1,
		accel_y: 80,
		accel_x: 0
	},
	
	{
		id: "beginFall",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [27, 38, 47, 69],
		solid_area: [2,3,17,28],
		frames: 1,
		duration: 9,
		accel_y: 50,
		accel_x: 0
	},
	
	{
		id: "fall",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [52, 38, 72, 69],
		solid_area: [2,3,17,28],
		frames: 1,
		duration: 1,
		accel_y: 80,
		accel_x: 0	
	},
	
	{
		id: "hurt",
		image: "pivot/pivot_basic.png",
		rect: [140, 38, 160, 69],
		solid_area: [2,5,17,30],
		frames: 1,
		duration: 18
	},
	
	#--SWORD--#
	{
		id: "calibur1",
		image: "pivot/sword/calibur.png",
		body_area: "all",
		rect:        [ 2, 2,47,32],
		solid_area:  [ 3, 5,18,30],
		attack_area: [10, 2,40,29],
		frames: 4,
		pad: 3,
		duration: 4,
		accel_y: 80,
		accel_x: 0
	},
	
	{
		id: "calibur1End",
		image: "pivot/sword/calibur.png",
		body_area: "all",
		rect:        [198, 2,243,32],
		solid_area:  [  3, 5, 18,30],
		frames: 3,
		pad: 3,
		duration: 6,
		accel_y: 80,
		accel_x: 0
	},
	
	{
		id: "calibur2",
		image: "pivot/sword/calibur.png",
		body_area: "all",
		rect:        [ 2,38,47,70],
		solid_area:  [ 3, 5,18,30],
		attack_area: [10, 4,46,27],
		frames: 4,
		pad: 3,
		duration: 4,
		accel_y: 80,
		accel_x: 0
	},
	
	{
		id: "calibur2End",
		image: "pivot/sword/calibur.png",
		body_area: "all",
		rect:        [198,38,243,70],
		solid_area:  [  3, 5, 18,30],
		frames: 4,
		pad: 3,
		duration: 5,
		accel_y: 80,
		accel_x: 0
	},
],

on_ctrl_up: "if(cycle_of_last_up + 20 < cycle,
			set(cycle_of_last_up, cycle),
			speech_dialog(level.player,
		[~Thanks for downloading this demo!\\nThere are a few things that need to be said.~],
		[~First off, this game is inspired by Spiral Knights,\\nand it will always be completely free.~],
		[~This tileset came from Frogatto. The Frogatto\\nteam gave permission to use it for now.~],
		[~Lastly, this is a very early version.\\nThings will change radically in the future!~],
		))",

}
