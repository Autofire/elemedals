# pivot
# Main player.
# TODO:
# Give pivot a turn animation (Will not interfere with other actions)
# Fix flinch-during-jump
# Fix damage hitboxes while running
# Fix second sword swing animation

{
is_strict: true,

id: "pivot_playable",
prototype: [
	"pivot_input_keyboard",
	"pivot_properties_sword",	// NOTE: This order must be maintained
	"pivot_properties_gun",
	"player_controlled_platformer_character",
	"pivot_anim_general",
	"pivot_anim_sword",
	"pivot_anim_gun",
],

editor_info: { category: "player" },
solid_dimensions: ["player","common","boss"],
collide_dimensions: ["common","enemy","boss","hazard"],
vehicle: false,
hitpoints: 10,
mass: 5,
is_human: true,
friction: 2200,
traction_in_air: 100,
traction_in_water: 1000,
feet_width: 5,
zorder: "@include data/zorder.cfg:player",

properties: {
	//////////
	// DOCS //
	//////////
	c_docs_about:   "@include docs/about.json",
	c_docs_credits: "@include docs/credits.json",
	c_docs_updates: "@include docs/update.json",
	c_docs_v_0_1:   "@include docs/v_0_1.json",
	c_docs_v_0_2:   "@include docs/v_0_2.json",
	
	// TODO: Move in sword stuff
	cATTACK_KNOCKBACK_X: "150",
	cATTACK_KNOCKBACK_Y: "-100",
	
	// BASICS //
	cTEAM: "'player'",
	cLEFT: -1,
	cRIGHT: 1,
	
	// MOVEMENT //
	cBASE_RUN_SPEED: "int :: 190",
	
	airSpeed:  { type: "int", default: 30 },
	jumpPower: { type: "int", init: 1800 },
	
	// TAKING DAMAGE //
	cFLINCH_THRESHOLD: 0,
	cHURT_VELOCITY_Y: "-1100",
	cHURT_VELOCITY_X: "250",
	
	// ATTACKING //
	// This just applies to the sword
	cATTACK_DAMAGE: "int <- 
		if(cANIM_NUM > 0 and cANIM_NAME = sword,
			cSWORD_DATA[sword]['normal_damage'][cANIM_NUM - 1],
			0
		)
	",
	cDAMAGE_COOLDOWN: "-1",
	
	cSOONEST_SWORD_REQUEST: "10",	// The earliest the player can be when
									  // attempting to swing their sword. This
									  // will probably vary based on sword.
	
	// Overloaded from hittable.cfg
	cMINOR_ATTACK_NUM: "if(cANIM_NUM = null, 1, cANIM_NUM)",

	cCAN_TURN: "bool :: bool(cANIM_NAME != sword)",
	
	// Equipment -- These will change often throughout the game
	sword: { type: "string", default: 'calibur' },
	

	///////////////
	// FUNCTIONS //
	///////////////
	
	// HUD //
	guiHeartDisplay: {
		type: "obj heart_display",
		init: "object('heart_display', 27+0, 27+0, 1)",
		persistent: false,
	},
	
	SetUpGui: "def() -> commands 
		map(components,
			'gui_element', [
				remove_object(gui_element),
				add_object(gui_element),
			]
		) where components = [guiHeartDisplay]
	",


    
	/******************************************************
	 * CharToInt
	 *  This function accepts a single character, and then
	 * converts it to an integer. If it isn't a valid
	 * number, it returns 0.
	 ******************************************************/
	CharToInt: "def(string inStr) -> int
		if(inStr in numbers, int(inStr), 0)
			where numbers = ['1','2','3','4','5','6','7','8','9','0']
	",
	
	/******************************************************
	 * FilterNull
	 *  This function accepts an integer or a null. If
	 * given a null, it returns an empty string. Otherwise,
	 * it returns the integer.
	 ******************************************************/
	FilterNull: "def(int|null num) -> int|string
		if(num = null, '', num)
	",
	
	/******************************************************
	 * TryTurn
	 *  Given a direction, this function will attempt to
	 * set the facing to the new one, based on cCAN_TURN.
	 ******************************************************/
	TryTurn: "def(int newdir) -> commands
		if(cCAN_TURN, set(facing, newdir))",
	
	// Overloading (from hittable) because we want to flinch in air
	handle_flinch: "def(obj hittable collide_with) -> commands
		execute(me,
			if(final_damage_amount(collide_with, collide_with.cATTACK_DAMAGE) >= cFLINCH_THRESHOLD,
				cause_flinch(collide_with)
			)
		)
	",

},

#ANIMATION HANDLES#
on_create: "[animation('stand'), SetUpGui()]",

////////////////////
// INPUT HANDLING //
////////////////////
on_process: "[
	fire_event('bookkeep'),
	
	//debug(cATTACK_DAMAGE),
	
	// INPUT //
	map(values(keyBindings), value, TrackKey(value)),
	
	if(CtrlPressed('jump'),
		fire_event('ctrl_try_jump')
	),
	
	if(CtrlPressed('sword'),
		fire_event('ctrl_sword')
	),
	
	if(CtrlPressed('gun'),
		fire_event('ctrl_gun')
	),
	
	if(CtrlPressed('pause_menu'),
		fire_event('pause_menu'),
	),
	
	if((ctrl_left or ctrl_right) and (animation = 'stand'),
		set(animation, 'run')
	),
		
	if(ctrl_left  and cIN_CONTROLLABLE_ANIM, [
		TryTurn(cLEFT),
		if(is_standing, add(velocity_x, -cRUN_SPEED), add(velocity_x, -airSpeed))]),
					
	if(ctrl_right and cIN_CONTROLLABLE_ANIM, [
		TryTurn(cRIGHT),
		if(is_standing, add(velocity_x, cRUN_SPEED), add(velocity_x, airSpeed))]),
]",

on_process_stand: "if(
	not is_standing,
		animation('beginFall')
)",			
on_process_run: "if(
	not (ctrl_left or ctrl_right),
		animation('stand'),
	not is_standing,
		animation('beginFall')
)",
on_end_stand_anim: "animation('stand')",
on_end_run_anim:   "animation('run')",

on_jumped_on: "
	//if(arg.jumped_on_by != null and arg.jumped_on_by is obj hittable and arg.jumped_on_by.cTEAM = 'evil',
	//	get_hit_sourceless('neutral', arg.jumped_on_by.cATTACK_DAMAGE)
	//)
	get_hit_sourceless('neutral', 1)
",
on_end_hurt_anim:  "animation('beginFall')",

# -- Jumping and falling -- #
// This is NECESSARY to stop the builtin ctrl_jump from triggering.
// I didn't want to screw with player_controlled_platformer_character.cfg
on_ctrl_jump: "",

on_ctrl_try_jump: "
	if(is_standing and cIN_GROUNDED_ANIM,
		[animation('jump'), set(velocity_y, -jumpPower)]
	)
",
				
on_process_jump: "
	if(not CtrlHeld('jump'), 
	   [if(velocity_y < 0,
			set(velocity_y, -200)
		),
		animation('beginFall')
	   ],
				
		velocity_y >= 0,		// As soon as we stop going up, we begin to fall.
			animation('beginFall'),
				
		add(velocity_y, -20)	// Our final else; keeps us going up if we hold the button
	)
",
				
on_end_beginFall_anim: "[animation('fall')]",

on_end_anim: "[
	if(cANIM_NAME = sword, fire_event('end_sword_anim')),
]",

on_collide_feet: "[
	if(animation not in ['calibur1','hurt'],
		animation('stand')
	),
	//proto_event('hittable', 'collide_feet', arg)	// TODO: Fix this
	if( arg.collide_with is obj hittable and
		arg.collide_with.cIS_BOUNCY,
			[set(me.velocity_x, arg.collide_with.cBOUNCE_VELOCITY_X),
			 set(me.velocity_y, arg.collide_with.cBOUNCE_VELOCITY_Y)]
	),
]",

//on_ctrl_attack: "spawn('bomb_blast', 30, 0, facing)",

on_pause_menu: "paused_speech_dialog(level.player,
	[~You rang?
	  (ESC exits all this text stuff.)~,
		~About Elemedals~, [paused_speech_dialog(flatten(c_docs_about))],
		~Credits~,         [paused_speech_dialog(flatten(c_docs_credits))],
		~About updates~,   [paused_speech_dialog(flatten(c_docs_updates))],
		~Version info~,
			[paused_speech_dialog(
				[~Pick a version~,
					~Verson 0.1~,  [paused_speech_dialog(flatten(c_docs_v_0_1))],
					~Verson 0.2~,  [paused_speech_dialog(flatten(c_docs_v_0_2))],
				]
			)]
	]
)",

} // End of file
