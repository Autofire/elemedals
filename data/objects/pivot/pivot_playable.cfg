# Pivot
# Main player.
# TODO:
# Give Pivot a turn animation (Will not interfere with other actions)
# Fix flinch-during-jump
# Fix damage hitboxes while running
# Fix second sword swing animation

{
is_strict: true,

id: "pivot_playable",
prototype: [
	"pivot_input_keyboard",
	"pivot_properties_sword",	// NOTE: This order must be maintained
	"player_controlled_platformer_character",
	"pivot_anim_general",
	"pivot_anim_sword",
],

editor_info: { category: "player" },
solid_dimensions: ["player","common","boss"],
collide_dimensions: ["common","enemy","boss","hazard"],
vehicle: false,
hitpoints: 10,
mass: 5,
is_human: true,
friction: 2200,
traction_in_air: 100,
traction_in_water: 1000,
feet_width: 5,
zorder: "@include data/zorder.cfg:player",

properties: {
	///////////////
	// CONSTANTS //
	///////////////
	c_docs_about:   "@include docs/about.json",
	c_docs_credits: "@include docs/credits.json",
	c_docs_updates: "@include docs/update.json",
	c_docs_v_0_3:   "@include docs/v_0_3.json",
	
	cTEAM: "'player'",
	cLEFT: -1,
	cRIGHT: 1,
	
	cBASE_RUN_SPEED: "int :: 190",
	
	cFLINCH_THRESHOLD: 0,
	cHURT_VELOCITY_Y: "-1100",
	cHURT_VELOCITY_X: "250",
	
	cATTACK_DAMAGE: "int :: if(cANIM_NUM = 3, 8, 5)",
	cDAMAGE_COOLDOWN: "-1",
	
	cSOONEST_SWORD_REQUEST: "10",	// The earliest the player can be when
									  // attempting to swing their sword. This
									  // will probably vary based on sword.
	
	// Overloaded from hittable.cfg
	cMINOR_ATTACK_NUM: "if(cANIM_NUM = null, 1, cANIM_NUM)",

	cCAN_TURN: "bool :: bool(cANIM_GROUP != sword)",
	
	
	///////////////
	// VARIABLES //
	///////////////
	airSpeed:   { type: "int", default: 30 },

	jumpTicks: { type: "int", init: 0 },
	jumpPower: { type: "int", init: 1800 },
	 
	cycleOfLastUp: 	{ type: "int", default: 0 },	
	cycleOfLastSwordInput: { type: "int", default: 0 },

	// Equipment -- These will change often throughout the game
	sword: { type: "string", default: 'calibur' },

	///////////////
	// FUNCTIONS //
	///////////////
	
	// HUD //
	guiHeartDisplay: {
		type: "obj heart_display",
		init: "object('heart_display', 27+0, 27+0, 1)",
		persistent: false,
	},
	
	SetUpGui: "def() -> commands 
		map(components,
			'gui_element', [
				remove_object(gui_element),
				add_object(gui_element),
			]
		) where components = [guiHeartDisplay]
	",


    
	/******************************************************
	 * CharToInt
	 *  This function accepts a single character, and then
	 * converts it to an integer. If it isn't a valid
	 * number, it returns 0.
	 ******************************************************/
	CharToInt: "def(string inStr) -> int
		if(inStr in numbers, int(inStr), 0)
			where numbers = ['1','2','3','4','5','6','7','8','9','0']
	",
	
	/******************************************************
	 * FilterNull
	 *  This function accepts an integer or a null. If
	 * given a null, it returns an empty string. Otherwise,
	 * it returns the integer.
	 ******************************************************/
	FilterNull: "def(int|null num) -> int|string
		if(num = null, '', num)
	",
	
	/******************************************************
	 * TryTurn
	 *  Given a direction, this function will attempt to
	 * set the facing to the new one, based on cCAN_TURN.
	 ******************************************************/
	TryTurn: "def(int newdir) -> commands
		if(cCAN_TURN, set(facing, newdir))",
	
	// Overloading (from hittable) because we want to flinch in air
	handle_flinch: "def(obj hittable collide_with) -> commands
		execute(me,
			if(final_damage_amount(collide_with, collide_with.cATTACK_DAMAGE) >= cFLINCH_THRESHOLD,
				cause_flinch(collide_with)
			)
		)
	",

},

#ANIMATION HANDLES#
on_create: "[animation('stand'), SetUpGui(), set(jumpTicks, 0)]",

# -- stuff that is related to the player's input follows
on_process: "[
	fire_event('bookkeep'),
	
	
	// INPUT //
	map(values(keyBindings), value, TrackKey(value)),
	
	if(CtrlPressed('sword'),
		fire_event('ctrl_sword')
	),
	
	if(CtrlPressed('pause_menu'),
		fire_event('pause_menu'),
	),
	
	if((ctrl_left or ctrl_right) and (animation = 'stand'),
		set(animation, 'run')
	),
		
	if(ctrl_left  and cIN_CONTROLLABLE_ANIM, [
		TryTurn(cLEFT),
		if(is_standing, add(velocity_x, -cRUN_SPEED), add(velocity_x, -airSpeed))]),
					
	if(ctrl_right and cIN_CONTROLLABLE_ANIM, [
		TryTurn(cRIGHT),
		if(is_standing, add(velocity_x, cRUN_SPEED), add(velocity_x, airSpeed))]),
]",

on_process_stand: "if(
	not is_standing,
		animation('beginFall')
)",			
on_process_run: "if(
	not (ctrl_left or ctrl_right),
		animation('stand'),
	not is_standing,
		animation('beginFall')
)",
on_end_stand_anim: "animation('stand')",
on_end_run_anim:   "animation('run')",

on_jumped_on: "
	//if(arg.jumped_on_by != null and arg.jumped_on_by is obj hittable and arg.jumped_on_by.cTEAM = 'evil',
	//	get_hit_sourceless('neutral', arg.jumped_on_by.cATTACK_DAMAGE)
	//)
	get_hit_sourceless('neutral', 1)
",
on_end_hurt_anim:  "animation('beginFall')",

# -- Jumping and falling -- #
on_ctrl_jump: "if(is_standing and cIN_GROUNDED_ANIM,
				[animation('jump'), add(velocity_y, -jumpPower)]
				)",
				
on_process_jump: "if(not ctrl_jump, [
				if(velocity_y < 0, set(velocity_y, -200)),
				animation('beginFall')],
				
				velocity_y >= 0, animation('beginFall'),
				
				add(velocity_y, -20)
				)",
				
on_end_beginFall_anim: "[animation('fall')]",

on_end_anim: "[
	if(cANIM_GROUP = sword, fire_event('end_sword_anim')),
]",

on_collide_feet: "[
	if(animation not in ['calibur1','hurt'],
		animation('stand')
	),
	//proto_event('hittable', 'collide_feet', arg)	// TODO: Fix this
	if( arg.collide_with is obj hittable and
		arg.collide_with.cIS_BOUNCY,
			[set(me.velocity_x, arg.collide_with.cBOUNCE_VELOCITY_X),
			 set(me.velocity_y, arg.collide_with.cBOUNCE_VELOCITY_Y)]
	),
]",

/////////////////////
// ATTACK HANDLING //
/////////////////////

on_ctrl_attack: "spawn('bomb_blast', 30, 0, facing)",


/*on_pause_menu: "
	paused_speech_dialog(level.player,
		[~What would you like to look at?~,
			~About~, [paused_speech_dialog(
				[~Thanks for downloading this demo!
				  There are a few things that need to be said.~],
				[~First off, this game is inspired by Spiral Knights,
				  and it will always be completely free.~],
				[~This tileset came from Frogatto. The Frogatto
				  team gave permission to use it for now.~],
				[~Lastly, this is a very early version.
				  Things will change radically in the future!~]
			)],
			
			~About auto-updates~, [paused_speech_dialog(
				[~Other meep~]
			)],
			
			~Version 0.3 additions~, [paused_speech_dialog(
				[~Meep~]
			)],
		]
	)
",*/

on_pause_menu: "paused_speech_dialog(level.player,
	[~You rang?
	  (ESC exits all this text stuff.)~,
		~About Elemedals~, [paused_speech_dialog(flatten(c_docs_about))],
		~Credits~,         [paused_speech_dialog(flatten(c_docs_credits))],
		~About updates~,   [paused_speech_dialog(flatten(c_docs_updates))],
		~Version info~,
			[paused_speech_dialog(
				[~Pick a version~,
					~Verson 0.3~,  [paused_speech_dialog(flatten(c_docs_v_0_3))],
				]
			)]
	]
)",

} // End of file