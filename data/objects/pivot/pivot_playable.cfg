# Pivot
# Main player.
# TODO:
# Give Pivot a turn animation (Will not interfere with other actions)
# Fix flinch-during-jump
# Fix damage hitboxes while running

{
on_enter_hurt_anim: "debug(['HP: ',hitpoints])",

#DEFINES#
id: "pivot_playable",
prototype: ["player_controlled_platformer_character"],
editor_info: { category: "player" },
solid_dimensions: ["player","common","boss"],
collide_dimensions: ["common","enemy","boss","hazard"],
vehicle: false,
hitpoints: 30,
mass: 5,
is_human: true,
friction: 2200,
traction_in_air: 100,
traction_in_water: 1000,
feet_width: 5,
zorder: "@include data/zorder.cfg:player",

properties: {
	# vars in all caps are normal values.
	# If the used variable is changed for some reason,
	# i.e. player gets stunned, then the original value can
	# be reverted back too.
	
	# The reason for doing things like this is because certain
	# items might change these values.
	
	RUNSPEED: { type: "int", default: 190 },
	runspeed: { type: "int", default: 190 },
	
	AIRSPEED: { type: "int", default: 30 },
	airspeed: { type: "int", default: 30 },

	JUMP_POWER: { type: "int", default: -1350 },
	jump_power: { type: "int", default: -1350 },
	
	flinch_threshold: 0,
	hurt_velocity_y: "-1100",
	hurt_velocity_x: "250",
	jumpticks: { type: "int", default: 0 },
	cycle_of_last_up: { type: "int", default: 0 },
	
	team: "'player'",
	left: -1,
	right: 1,
	
	sword_xoffset: "int :: if(facing = left, 16, 67)",
	
	# -- functions -- #
	grounded_anim: "bool :: bool(self.animation in ['stand', 'run', 'sword1'])",
	controllable_anim: "bool :: bool(self.animation in ['stand', 'run', 'jump', 'beginFall', 'fall'])", 
	can_turn: "bool :: bool(self.animation not in ['sword1'])",
	
	turn: "def(int newdir) -> commands
		if(newdir != facing and can_turn, set(facing, newdir))",
	
			# Overloading (from hittable) because we want to flinch in air #
	handle_flinch: "def(obj hittable collide_with) -> commands
			execute(me, if(final_damage_amount(collide_with, collide_with.attack_damage) >= flinch_threshold, cause_flinch(collide_with)))",
},

#ANIMATION HANDLES#
on_create: "animation('stand')",
on_end_stand_anim: "animation('stand')",
on_collide_feet: "if(animation not in ['sword1','hurt'], animation('stand'))",

# -- stuff that is related to the player's input follows
on_process: "[fire_event('reb'),
			if((ctrl_left or ctrl_right) and animation = 'stand', set(animation, 'run')),
			if(ctrl_left, [
						if(can_turn, turn(left)),
						if(is_standing, add(velocity_x, -runspeed), add(velocity_x, -airspeed))]),
			if(ctrl_right, [
						if(can_turn, turn(right)),
						if(is_standing, add(velocity_x, runspeed), add(velocity_x, airspeed))]),
#			if(grounded_anim and (not is_standing), animation('beginFall')),#
			]",
			
on_process_run: "if(not (ctrl_left or ctrl_right),
					animation('stand'))",
on_end_run_anim: "animation('run')",
on_end_hurt_anim: "animation('beginFall')",

# -- Jumping and falling -- #
on_ctrl_jump: "if(is_standing and grounded_anim,
				[animation('jump'), add(velocity_y, jump_power), set(jumpticks, 20)]
				)",
on_process_jump: "if(ctrl_jump and jumpticks != 0,
					[add(velocity_y, -65), add(jumpticks, -1)],
					animation('beginFall')
					)",
on_end_beginFall_anim: "[animation('fall'), set(jumpticks, 0)]",

# -- General attacks -- #
on_ctrl_tongue: "if(controllable_anim,
					[animation('sword1'),
					spawn('pivot_playable.calibur1',
						midpoint_x+sword_xoffset, midpoint_y+30, facing,
						[set(child.parent, me)])]		//set(child.pivot, sword1p)
					)",

on_ctrl_up: "if(cycle_of_last_up + 20 < cycle,
			set(cycle_of_last_up, cycle),
			speech_dialog(level.player,
		[~Thanks for downloading this demo!\\nThere are a few things that need to be said.~],
		[~First off, this game is inspired by Spiral Knights,\\nand it will always be completely free.~],
		[~This tileset came from Frogatto. The Frogatto\\nteam gave permission to use it for now.~],
		[~Lastly, this is a very early version.\\nThings will change radically in the future!~],
		[~As a treat for reading all of this, here's a tip:~],
		[~Use Ctrl-E to open the editor! Some things might\\n cause the game to crash,~],
		[~But I hope that won't stop you from trying things out!~]))",

on_ctrl_attack: "spawn('bomb_blast', 0, 0, facing)",

# -- Sword attacks -- #
on_end_sword1_anim: "animation('stand')",

#ANIMATIONS#
animation: [
	{
		id: "stand",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [2, 2, 22, 33],
		solid_area: [3,5,18,30],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
		accel_y: 80,
		accel_x: 0,
	},
	
	{
		id: "run",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [32, 2, 58, 33],
		solid_area: [6,5,21,30],
		frames: 4,
		frames_per_row: 4,
		pad: 3,
		duration: 8,
		accel_y: 80,
		accel_x: 0,
	},
	
	{
		id: "jump",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [2, 38, 22, 69],
		solid_area: [2,3,17,28],
		frames: 1,
		duration: 1,
		accel_y: 80,
		accel_x: 0
	},
	
	{
		id: "beginFall",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [27, 38, 47, 69],
		solid_area: [2,3,17,28],
		frames: 1,
		duration: 8,
		accel_y: 80,
		accel_x: 0
	},
	
	{
		id: "fall",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [52, 38, 72, 69],
		solid_area: [2,3,17,28],
		frames: 1,
		duration: 1,
		accel_y: 80,
		accel_x: 0	
	},
	
	{
		id: "hurt",
		image: "pivot/pivot_basic.png",
		rect: [140, 38, 160, 69],
		solid_area: [2,5,17,30],
		frames: 1,
		duration: 18
	},
	
	#--SWORD--#
	{
		id: "sword1",
		image: "pivot/pivot_sword.png",
		body_area: "all",
		pivot_sword1p: [5,5],
		rect: [2,2,32,32],
		solid_area: [3,4,18,29],
		frames: 5,
		frames_per_row: 5,
		pad: 3,
		duration: 4,
		accel_y: 80,
		accel_x: 0
	}
],

object_type: [
	{
		id: "calibur1",
		prototype: ["hittable_std"],
		on_end_anim: "die()",
		on_process: "if(level.player.animation != 'sword1' or time_in_animation = 18, die())",
			# This needs to die 1 frame before end #
		collide_dimensions: ["player","common","boss"],
		
		zorder: 5,
		object_level_collisions: false,
		
		properties: {
			team: "'player'",
			dies_upon_dealing_damage: false,
			is_invincible: true,
			attack_damage: 50,
			damage_cooldown: 25,
			attack_knockback_x: 500,
			attack_knockback_y: -1000
		},
		
		animation: {
			id: "normal",
			image: "pivot/sword/calibur.png",
			rect: [2,2,42,34],
			attack_area: [9,1,38,32],
			frames: 5,
			frames_per_row: 5,
			pad: 3,
			duration: 4,
		}
	},
	]
}
