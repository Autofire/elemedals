# Pivot
# Main player.
# TODO:
# Give Pivot a turn animation (Will not interfere with other actions)
# Fix damage hitboxes while running

{
#DEFINES#
id: "pivot_playable",
prototype: ["player_controlled_platformer_character"],
editor_info: { category: "player" },
solid_dimensions: ["player","common","boss"],
vehicle: false,
hitpoints: 6,
mass: 5,
is_human: true,
friction: 2200,
traction_in_air: 100,
traction_in_water: 1000,
feet_width: 5,

is_strict: false,	// will be removed before long

properties: {
	# vars in all caps are normal values.
	# If the used variable is changed for some reason,
	# i.e. player gets stunned, then the original value can
	# be reverted back too.
	
	# The reason for doing things like this is because certain
	# items might change these values.
	
	RUNSPEED: { type: "int", default: 190 },
	runspeed: { type: "int", default: 190 },
	
	AIRSPEED: { type: "int", default: 30 },
	airspeed: { type: "int", default: 30 },

	JUMPHEIGHT: { type: "int", default: -1350 },
	jumpheight: { type: "int", default: -1350 },
	
	flinch_threshold: 0,
	hurt_velocity_y: "-1100",
	hurt_velocity_x: "250",
	
	# -- functions -- #
	
	grounded_anim: "bool <- self.animation in ['stand', 'run']"
},

#ANIMATION HANDLES#
on_create: "animation('stand')",
on_end_stand_anim: "animation('stand')",
on_collide_feet: "[animation('stand'), set(jumpticks, 20)]",

#Controller inputs -- stuff that is usually related to the player's input
on_process: "[if((ctrl_left or ctrl_right) and animation in ['stand'],
				set(animation, 'run')),
			if(ctrl_left, [set(facing, -1),
						if(is_standing, add(velocity_x, -runspeed), add(velocity_x, -airspeed))]),
			if(ctrl_right, [set(facing, 1),
						if(is_standing, add(velocity_x, runspeed), add(velocity_x, airspeed))]),
			if(grounded_anim and (not is_standing), animation('beginFall')),
			]",
			
on_process_run: "if(not (ctrl_left or ctrl_right),
					animation('stand'),
					set(facing, if(ctrl_left, -1, 1)))",
on_end_run_anim: "animation('run')",

# -- Jumping and falling -- #
on_ctrl_jump: "if(animation = 'stand' or animation = 'run',
				[animation('jump'), add(velocity_y, jumpheight)]
				)",
on_process_jump: "if(ctrl_jump and jumpticks != 0,
					[add(velocity_y, -65), add(jumpticks, -1)],
					animation('beginFall')
					)",
on_end_beginFall_anim: "[animation('fall'), set(jumpticks, 0)]",

#ANIMATIONS#
animation: [
	{
		id: "stand",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [2, 2, 22, 33],
		solid_area: [3,5,18,30],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
		accel_y: 80,
		accel_x: 0,
	},
	
	{
		id: "run",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [32, 2, 58, 33],
		solid_area: [6,5,21,30],
		frames: 4,
		frames_per_row: 4,
		pad: 3,
		duration: 8,
		accel_y: 80,
		accel_x: 0,
	},
	
	{
		id: "jump",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [2, 38, 22, 69],
		solid_area: [2,3,17,28],
		frames: 1,
		duration: 1,
		accel_y: 80,
		accel_x: 0
	},
	
	{
		id: "beginFall",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [27, 38, 47, 69],
		solid_area: [2,3,17,28],
		frames: 1,
		duration: 8,
		accel_y: 80,
		accel_x: 0
	},
	
	{
		id: "fall",
		body_area: "all",
		image: "pivot/pivot_basic.png",
		rect: [52, 38, 72, 69],
		solid_area: [2,3,17,28],
		frames: 1,
		duration: 1,
		accel_y: 80,
		accel_x: 0	
	},
	
	{
		id: "hurt",
		image: "pivot/pivot_basic.png",
		rect: [140, 38, 160, 69],
		solid_area: [2,5,17,30],
		frames: 1,
		duration: 18
	},
],
}
