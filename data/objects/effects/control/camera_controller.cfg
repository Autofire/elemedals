{
id: "camera_controller", //2, a strict-mode version
next_animation: "'normal'",
always_active: true, //Hack until we figure out the appropriate bounding box.
hidden_in_game: true,
zorder: "@include data/zorder.cfg:in_front_of_everything",
is_strict: true,

editor_info: {     
	category: "controllers",
	xhelp: "When triggered, this controller moves the camera through a preset path. Once it reaches its
destination, it fires the triggered event of the object with the ID given by next_id. For use with
scripting, please see the setup() and go() functions as defined in camera_controller.cfg.

variable        | description
--------------------------------
passepartout    | If the object is to be used in the editor, should it preview the camera area?
preview_route   | If the object is to be used in the editor, should the preview move along the route?
speed           | How fast the camera moves. This number is related to 'percentage along camera path'.
tween_type      | One of ['linear', 'sin_in_out', 'sin_in', 'sin_out']. The functions are defined in the math library.
path            | This value is just passed to set_path().
average_path    | Should the 'path' points be considered control points for _the_ bezier curve?
linked_object   | Works like a button's linked object, but is fired when the camera is done moving.
start_with_player_as_first_node | Defaults to true, if false snaps to the first position in the path.
See the set_options FFL function in ~/modules/frogatto/data/objects/effects/control/camera_controller.cfg for more.
Note: Rope preview and passepartout only works with editor unpaused.",
},


properties: {
	//Editor Properties:
	passepartout: {type: "string", default: "'standard'", editor_info: {type: "enum", value: "'standard'", enum_values: ["none", "standard", "iPhone", "iPad"],},},
	preview_route: {type: "bool", default: false, editor_info: {type: "boolean", value: "false",},},
	speed: {type: "int", editor_info: {type: "int", value: 10, min_value: 1, max_value: 100,},},
	tween_type: {type: "string", editor_info: {type: "enum", value: "'sin_in_out'", enum_values: ["linear", "sin_in_out", "sin_in", "sin_out"],},},
	path: {type: "[[decimal,decimal]|map|object]", editor_info: {type: "points", value: "[]",},},
	average_path: {type: "bool", editor_info: {type: "boolean", value: "false",},},
	target_zoom: {type: "decimal", editor_info: {type: "decimal", value: 1, min_value: 0.25, max_value: 7.5,},},
	linked_object: {type: "string|null", editor_info: {type: "label",},},
	release_control: {type: "bool", editor_info: {type: "boolean", value: "false",},},
	start_with_player_as_first_node: {type: "bool", editor_info: {type: "boolean", value: "true",},},
	
	/*Additional Useful FFL-Accessible Properties	
linked_delay    | The number of frames to wait until firing the button_pressed event for the linked object and on_cut for ourself.
callback        | Either a function or a list of functions to be called when the camera is done moving. Called before on_cut is fired. */
	
	//Vars:
	preview_rope_controller: {type: "object|null", default: null,},
	last_preview_path: {type: "[[decimal]|map|object]|null", default: null,},
	last_preview_smooth: {type: "bool", default: false,},
	last_preview_route: {type: "bool", default: false,},
	linked_object_list: {type: "[string]", default: [],}, //[obj triggerable]?
	linked_delay: {type: "int", default: 1,},
	callback: {type: "[function()->commands]", default: [],},
	travel_time: { type: "decimal", default: 0.0,},
	starting_camera_position: {type: "[decimal]|null", default: null,},
	starting_camera_zoom: {type: "decimal|null", default: null,},
	going: {default: false,},
	
	//Non-editor Properties:
	
	//Called each frame. Returns the path to draw the purple arrow ribbon along.
	new_preview_path: "[[decimal,decimal]] <- if(start_with_player_as_first_node, [[decimal,decimal] <- starting_camera_position or lib.standardize.camera(level)], []) + self.path + if(release_control, [lib.standardize.natural_camera(level)], [])",


	do_rope_preview: "def() -> commands [
		set(last_preview_path, new_preview_path),
		set(last_preview_smooth, self.average_path),
		if(rope_controller != preview_rope_controller, [
			if(preview_rope_controller, self.remove_rope_controller(preview_rope_controller)),
			self.add_rope_controller(rope_controller),
			set_points([[decimal,decimal]] <- new_preview_path),
		],[
			if(last_preview_path != new_preview_path or last_preview_smooth != self.average_path,
				set_points([[decimal,decimal]] <- new_preview_path))
		]) where set_points = function([[decimal,decimal]]) -> commands <- (obj curvy_rope_controller|obj camera_controller.preview_rope_controller <- rope_controller).set_points,
	] where rope_controller = if(last_preview_smooth = self.average_path and preview_rope_controller, 
		preview_rope_controller, //Use the cached object if it's valid.
		if(self.average_path,
			object('curvy_rope_controller', 0,0,0, {desired_rope_type:'arrow ribbon'}), 
			object('${self.type}.preview_rope_controller')) )",
	
	
	add_rope_controller: "def(object rope_ctrl) -> commands [
		add_object(rope_ctrl),
		set(preview_rope_controller, rope_ctrl),
		set(rope_ctrl.x, -10000), set(rope_ctrl.y, -10000), 
	]",
	
	remove_rope_controller: "def(object rope_ctrl) -> commands [
		set(preview_rope_controller, null),
		remove() asserting remove is function()->commands where remove = rope_ctrl.remove,
	]",
	
	
	draw_border: "def([decimal] cam, decimal screen_width, decimal screen_height) -> commands if(not level.is_paused, [
		debug_rect(int(cam[0]-screen_width/2), int(cam[1]-screen_height/2), int(screen_width), -100000),
		debug_rect(int(cam[0]-screen_width/2), int(cam[1]+screen_height/2), int(screen_width),  100000),
		debug_rect(int(cam[0]-screen_width/2), int(cam[1]-100000), -100000, 300000),
		debug_rect(int(cam[0]+screen_width/2), int(cam[1]-100000), 100000, 300000),
	])",
	
	
	position_along_path: "overload(
		def([[decimal,decimal]] path, decimal percentage) -> [decimal] calc(path, percentage),
		def([[decimal,decimal]|map|object] path, decimal percentage) -> [decimal,decimal] calc(lib.standardize.toPoints(path), percentage)
	) where calc = def([[decimal,decimal]] path, decimal percentage) -> [decimal,decimal] [decimal,decimal] <- if(average_path,
		lib.math.bezier_curve(path, real_percentage(percentage)),
		lib.math.interpolate(path, real_percentage(percentage))
	) where real_percentage = def(decimal percentage)->decimal tween(percentage) asserting tween is function(decimal)->decimal where tween = lib.math[me.tween_type or 'sin_in_out']",
	
	
	//Called after the camera is done moving. Delayable.
	trigger_next_object: "def() -> commands [
		if(get_object(level, string <- (linked_object or '')) and (not level.in_editor), fire_event(get_object_or_die(level, string<-linked_object), 'triggered')), 
		if(linked_object_list, map(linked_object_list, 'obj', fire_event(get_object_or_die(level, obj), 'button_pressed'))),
		fire_event(self, 'cut'),
		map(callback, value()),
	]",
	
	
	//Setup: Takes a list of optionally mixed list [x,y]s, {mid_x:x, mid_y:y}s, or objects. These act as control points that the camera will move by. Level.camera_position is always the implicit first control point, and doesn't/can't be set here.
	set_path: "def([[decimal]|map|object] new_path) -> commands
		set(me.path, lib.standardize.toPoints(new_path)) asserting size(new_path)",
		
		
	go: "def(any|null callback) -> commands [
		fire_event(self, 'start_sequence'),
		if(callback, add(callback, [callback])),
	]",
	
	
	add: "def() -> commands add_object(self)",
	
	remove: "def() -> commands [ //Removes the camera controller cleanly, releasing any locks it's created.
		if(self.preview_rope_controller, self.remove_rope_controller(self.preview_rope_controller)),
		remove_object(self),
		set(level.lock_screen, null), 
	]",
	
	//This is so we can load a path referencing other objects from a level file we script. We can't easily reference the objects directly there, but we can evaluate a string in on_createâ€¦
	loadPath: "def(string path_string) -> commands set(me.path, lib.standardize.toPoints([object|map|[decimal]] <- eval(path_string)))",
},

//This could be fired more often, like, for instance, when we move a point variable in the level. As it is, we must check in on_process or on_draw for such changes.
on_editor_changed_variable: "[
	set(last_preview_route, self.preview_route),
	if(self.preview_route and (not last_preview_route), fire_event('start_preview')),
]",


on_draw: "if(self in level.editor_selection, 
	[
		//First on_draw function: If we're selected, draw a moving passepartout and a line of arrows to show where we're going to go.
		//This is in on_draw, as opposed to on_process, because it removes the double line effect but seems to only do so by not applying the rotation/scale to the object, producing hanging-down arrows.
		switch(passepartout,
			'standard', draw_border(cam_pos, 800,600),
			'iPhone', draw_border(cam_pos, 480*2,320*2), //Double-res there.
			'iPad', draw_border(cam_pos, 1024,768),
			null) where cam_pos = position_along_path(new_preview_path, travel_time),
		do_rope_preview(),
		set(starting_camera_position, null),
	
	], [
		//If we're not editing the object, then we'll remove the preview stuff for it. The passepartout will remove itself, but we'll have to manually clean up the rope object.
		if(preview_rope_controller, remove_rope_controller(preview_rope_controller)),
		
		//Now, if we're actually 'going' for real, we'll set the camera position and increment the camera travel time.	
		//This is done in on_draw, because we need to catch the level before the first frame if we're not starting on Frogatto himself. This is used for the *dramatic* pan-in to the scene.
		if(going, [
			lib.standardize.set_camera(level, Point2d <- position_along_path(
				new_preview_path, travel_time )),
			set(level.zoom, lib.math.interpolate(decimal <- starting_camera_zoom, travel_time, target_zoom)),
			
			if(not level.is_paused, set(travel_time, travel_time + me.speed/2000.0)),
			if(travel_time >= 1 and going = true, [//If we've travelled the length of the camera guide, we'll stop going and trigger the next object.
				set(going, false),
				if(release_control,
					set(level.lock_screen, null),
					set(level.lock_screen, [int] <- map(back(new_preview_path), int(value))) ), 
				schedule(linked_delay, [
					bind_command(def() trigger_next_object()),
				]),
			]),
		]),
	]
)",


//Recieve input from levers and triggers.
on_triggered:      "fire_event('start_sequence')",
on_button_pressed: "fire_event('start_sequence')",


//Reset some variables (we might start the sequence multiple times) and launch the main loop.
on_start_sequence: "[
	set(travel_time, 0),
	if(start_with_player_as_first_node or not path,
		set(starting_camera_position, lib.standardize.camera(level)),
		set(starting_camera_position, [decimal,decimal] <- path[0]) ),
	set(starting_camera_zoom, level.zoom),
	
	fire_event('roll'),
	set(going, true),
]",


on_start_preview: "[
	//Sets the camera to 'preview' mode, where we render a blue passepartout where the screen will be.
	set(travel_time, 0),
	fire_event('do_camera_preview'),
]",


on_do_camera_preview: "if(self.preview_route, [
	set(travel_time, lib.math.floor(travel_time + me.speed/2000.0)),
	if(travel_time > 1, set(travel_time, 0)),
	if(self.preview_route, schedule(1+int(travel_time>1)*19, fire_event('do_camera_preview'))),
])",


//Custom events, for use with scripting. These are split off into their own thing, so disaster doesn't strike if you forget to prototype them.
on_roll: "/*Your code here!*/", //Fired before the camera starts. You can set up the route here if you want.
on_cut:  "/*Your code here!*/", //Fired when the camera has reached its final resting place.


on_end_anim: "animation('normal')",

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 210,
	y: 228,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},

object_type: { //This implements, minimally, the curvy_rope_controller but just draws ropes between the lines instead of curving them.
	id: "preview_rope_controller",
	next_animation: "'normal'",
	always_active: false,
	hidden_in_game: true,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	
	properties: {
		ropes: {type: "[obj rope_angled_controller]", default: [],},
		
		//Used to draw curves for the rope preview in the editor. Strings new rope objects between the points passed in.
		set_points: "def(points) -> commands [
			set(ropes, new_ropes),                       //Remember the new ropes.
			map(ropes, remove_object(value)),            //Clean up the old ropes, if there are any.
			map(new_ropes, [
				add_object(value),
				set(value.always_active, true),          //Needed since we don't bother to set the activation rect on these.
				set(value.animation, 'arrow ribbon'), //Set the rope graphic.
			]),
		] where new_ropes = //First, list of all our new rope objects.
			map(
				map( //First, generate a list of each line segment between the verticies passed in.
					range(size(points)-1), 
					'point_index', 
					[points[point_index], points[point_index+1]] ),
				'point',
				object('rope_angled_controller', 0, 0, 0, { //Then, make an object for each line segment.
					x_1: point[0][0], 
					y_1: point[0][1], 
					x_2: point[1][0], 
					y_2: point[1][1],
				}) asserting point is [[decimal,decimal],[decimal,decimal]] )",
		
		//Remove this controller, and any rope objects it's spawned.
		remove: "def() -> commands map(ropes + [me], remove_object(value))",
	},
	
	on_end_anim: "animation('normal')",
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 179,
		y: 104,
		w: 28,
		h: 28,
		frames: 1,
		duration: 1000,
	},
},

}