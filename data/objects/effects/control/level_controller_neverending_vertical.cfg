{
id: "level_controller_neverending_vertical",
next_animation: "'normal'",
always_active: true,
hidden_in_game: true,
is_strict: true,
zorder: "@include data/zorder.cfg:in_front_of_everything",
editor_info: {
	category: "controllers",
},

properties: {
	cosmic_shift_threshhold: "16384",
	cosmic_shift_amount: "15360",


#-------------------------- vars --------------------------#
	scroll_amount: { type: "int", default: 0 },
	scroll_ypos: { type: "int", default: 0 },
	current_segments: { type: "[int]", default: [] },
	top_edge: { type: "int", default: 0 },
	bot_edge: { type: "int", default: 0 },
	last_ypos: { type: "int", default: 0 },
	segments_after: { type: "{string -> [int]}", default: {} },

#-------------------------- editor vars --------------------------#
	scroll_speed_incr: { type: "int", default: 0, editor_info: { type: "int", value: 2 } },
	scroll_speed: { type: "int", default: 0, editor_info: { type: "int", value: 2 } },
	scroll_speed_cap: { type: "int", default: 0, editor_info: { type: "int", value: 2 } },
	
	get_segment_difficulty_start: "def(int num) -> int if(segment_difficulty_start[str(num)] != null, segment_difficulty_start[str(num)], 0)",
	segment_difficulty_start: { type: "{string -> int}", default: {} },
},
on_process: "if(level.player.midpoint_y > cosmic_shift_threshhold, [cosmic_shift(0, -cosmic_shift_amount),
	              add(last_ypos, -cosmic_shift_amount),
	              add(scroll_ypos, -cosmic_shift_amount),
				  add(top_edge, -cosmic_shift_amount), add(bot_edge, -cosmic_shift_amount)],
                if(level.player.midpoint_y < -cosmic_shift_threshhold, [cosmic_shift(0, cosmic_shift_amount),
				  add(last_ypos, cosmic_shift_amount),
	              add(scroll_ypos, cosmic_shift_amount),
				  add(top_edge, cosmic_shift_amount), add(bot_edge, cosmic_shift_amount)],
					
	            [
				#debug((scroll_ypos - scroll_amount/10) - level.player.midpoint_y),#

				#if the level has gone beyond auto-scrolling, make
				 the auto-scrolling catch up#
				if(level.dimensions[3] < scroll_ypos - scroll_amount/10,
				   [set(scroll_ypos, level.dimensions[3]),
				    set(scroll_amount, 0)],
				add(scroll_amount, scroll_speed)),

				add(scroll_amount, scroll_speed),
	            set(level.dimensions, [level.dimensions[0], min(level.dimensions[1], level.player.midpoint_y-1300), level.dimensions[2], min(level.dimensions[3], scroll_ypos - scroll_amount/10, level.player.midpoint_y + 300)]),
				if(level.player.y <= (last_ypos - 40),
	[add(level.player.score, -(level.player.y - last_ypos)/5),
	set(me.last_ypos, level.player.y)]),

				#make sure this object doesn't go off the bottom of the level.#
				set(y, level.dimensions[3]-200),
	            if(level.player.midpoint_y < top_edge + 500,
				   if(new_segment = null,
				     debug('ERROR: could not find valid segment'),
	               [
	               add(current_segments, [new_segment]),
				   add_level_module(str(new_segment), level.dimensions[0], top_edge - level.segment_height),
				   add(top_edge, -level.segment_height),
				   add(level.player.difficulty, 1),
				   if(scroll_speed_incr and (scroll_speed < scroll_speed_cap) and ((level.player.difficulty%scroll_speed_incr) = 0), add(scroll_speed, 1))
				   ])
				   where new_segment = choose(filter(segments_after[str(back(current_segments))], 'n', get_segment_difficulty_start(n) <= level.player.difficulty and (not (n in current_segments))))
				   ),
				 if(level.player.midpoint_y < (bot_edge - 600) - level.segment_height,
				   fire_event('recycle_segment'))
	            ]))",
on_recycle_segment: "[remove_level_module(str(current_segments[0])),
				    add(bot_edge, -level.segment_height),
					set(current_segments, filter(current_segments, 'n', n != current_segments[0]))]",
on_create: "if(level.in_editor, die(),
	            [
				 set(scroll_ypos, level.dimensions[3]),
				 set(last_ypos, level.player.y),
				if(level.dimensions[1]%32, debug('illegal top dimension of level: not divisible by 32')),
				if(level.dimensions[3]%32, debug('illegal bottom dimension of level: not divisible by 32')),
	            add_level_module(str(first_segment), level.dimensions[0], level.dimensions[3] - level.segment_height),
				add(current_segments, [first_segment]),
	            set(top_edge, level.dimensions[3] - level.segment_height), set(bot_edge, level.dimensions[3])]
				 where first_segment = (level.player.y - level.dimensions[1])/level.segment_height
				)",
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 210, y: 135, w: 28, h: 28,
	duration: -1,
},
}