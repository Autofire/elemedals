//A health display, in the style of hearts. One hitpoint is half a heart.
{
	id: "heart_display",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	hidden_in_game: true,
	serializable: false,
	
	zorder: "@include data/zorder.cfg:in_front_of_everything",

	properties: {
		//target: { type: "custom_obj" },
		target: "custom_obj <- lp asserting lp where lp = level.local_player",
		
		heart_width: 38,
		heart_height: 38, 
		
		last_displayed_hitpoints: { type: "int", default: -1 },
		last_displayed_max_hitpoints: { type: "int", default: -1 },
	},
	
	on_process: "if(last_displayed_hitpoints != target.hitpoints or last_displayed_max_hitpoints != target.max_hitpoints, [
		set(last_displayed_hitpoints, target.hitpoints),
		set(last_displayed_max_hitpoints, target.max_hitpoints),
		(
		set_widgets(
			map(range(num_full), widget(me, { //Draw full hearts.
				type: 'image', 
				image: 'gui/hud3.png', 
				area: [33,49,49,65], 
				x: (value) * heart_width, 
				y: 0,
			})),
			map(range(num_half), widget(me, { //The half-heart.
				type: 'image', 
				image: 'gui/hud3.png', 
				area: [52,49,68,65], 
				x: (num_full + value) * heart_width, 
				y: 0,
			})),
			map(range(num_empty), widget(me, { //Empty heart containers.
				type: 'image', 
				image: 'gui/hud3.png', 
				area: [71,49,87,65], 
				x: (num_full + num_half + value) * heart_width, 
				y: 0,
			}))
		)
		asserting
			target.hitpoints <= target.max_hitpoints |  //might just want to constrain the second one, here, later?
			target.hitpoints >= 0
		where
			num_full = target.hitpoints/2,
			num_half = target.hitpoints%2,
			num_empty = target.max_hitpoints/2-target.hitpoints/2-target.hitpoints%2
		)
	])"
}

/* PREVIOUSLY, IN hud.cfg:
	//// Display the rows of hearts. First, the whole hearts, then empty hearts, then the half-heart if needed.
	([	map(range( ceil(max_HP/decimal(hearts_per_row * hp_per_heart))), 'row_index',
			slice(
				map(range(hearts_per_row), 'index', 
					draw_animation('heart_full', x_offset+x_width*index, y_offset+y_height*row_index)),
				0, 
				max(0, min(hearts_per_row, cur_HP/hp_per_heart - hearts_per_row*row_index))
			)
		),

		map(range(ceil(max_HP/decimal(hearts_per_row * hp_per_heart))), 'row_index',
			slice(
				map(range(hearts_per_row), 'index', 
					draw_animation('heart_empty', x_offset+x_width*index, y_offset+y_height*row_index)),
				max(0, min(hearts_per_row, (cur_HP)/hp_per_heart - hearts_per_row*row_index)), 
				min(hearts_per_row, ceil((max_HP)/decimal(hp_per_heart)) - hearts_per_row*row_index)
			)
		),
		
		if(cur_HP > 0 and cur_HP%hp_per_heart,
			map(range(hearts_per_row), 'index', 
				draw_animation('heart_half', x_offset+x_width*index, y_offset+y_height*row_index)
			)[cur_HP/hp_per_heart - row_index*(hearts_per_row)]
		) where row_index = cur_HP/(hearts_per_row * hp_per_heart)
	] where x_offset = 10,
	        y_offset = 52,
	        x_width = 32,
	        y_height = 32,
	        hp_per_heart = 2,
	        hearts_per_row = 10,
	        ceil = lib.math.ceil,
	        max_HP = level.local_player and level.local_player.max_hitpoints or 0,
	        cur_HP = level.local_player and level.local_player.hitpoints or 0 ),
*/
