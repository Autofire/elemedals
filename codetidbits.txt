This is for various bits of code which are helpful for reference.


From frogatto_playable.cfg

103-110:
	/*tracking key presses: we can accomplish mouseup, mousedown, and mouse-held by doing the following:
By setting the cycle on which a key is pressed, we limit ourselves to a set of keys that need to be re-checked on later frames to see if they're still held down. We don't need to register key-tracking up-front, as having an access of ctrl_keyboard in on_process will make this implicit (though any gap of more than one cycle in on_process tracking will break continuity of key-holds).
On the first frame, we set the current cycle a key has been pressed at. We leave this alone if the key continues being pressed (which allows us to know how long it's been pressed), or if a key is released, we null this out. */
_key_store: { type: "{string -> int|null}", default: {} },
track_key: "def(string key_name) ->commands if(key_name in ctrl_keys, if(not key_name in _key_store, add(_key_store, {(key_name) -> cycle})), set(_key_store[key_name], null))",
ctrl_keyboard: "def(string key_name) ->int|null if(key_name in _key_store, (cycle - (int <- _key_store[key_name])), null )",

...

764 track_key('i'),
765 if(ctrl_keyboard('i') = 1, suspend_level('inventory-screen.cfg') ),

finding a particular thing:
choose(filter(level.chars, value is obj chroma_norm), value.hitpoints)

...

Monday,  1 June 2015 06:22:51 AM
Autofire-Deb: How does the frogatto playable load the gui object?
(https://github.com/frogatto/frogatto/blob/master/data/objects/playable/frogatto_playable.cfg#L499)
I have similar lines in my character, but it tells me that it cannot find the
object. I will mention that I do not have the exact same path structure that
frogatto has, but I'm not very sure if that would be the cause.
Autofire-Deb: Actually I guess I should be linking to my project...but I don't
have this latest version on github atm.
Autofire-Deb: Well, here's the module. (https://github.com/Autofire/elemedals)
I assume I won't get any answers for a while, so I'll just leave the client
open

Monday,  1 June 2015 07:30:30 AM
Jetrel_: Autofire-Deb:  yeah, I'm gonna need a source link to that to help.
Commit early, commit often.
Jetrel_: Autofire-Deb:  basically what you see in those lines above is all
there is for "loading code".  There's no special path magic; as long as
something's in the data/objects folder, it can be referred to by name.
Jetrel_: Autofire-Deb:  all those loading commands there are doing, is just
that they trigger when a new copy of "frogatto the character object" is
created (i.e. when the player dies and respawns, and/or when the game is
loaded).
Jetrel_: Upon triggering, in frogatto-the-object's memory storage, they create
these new objects (which in turn automatically makes them run whatever
initialization code they've got, just by being created).
Jetrel_: This _doesn't_ put these in the game, though - they have to manually
be attached to the actual, running game, by `add_object()`.
Jetrel_: (hint:  creating an object like this via `object()`, and then
attaching it via `add_object()` is longhand for what `spawn()` does.   You use
the longhand if you need to save a reference to it so you can change things
about it later.)
Jetrel_: It's in `set_up_gui()`, right below there on line 533, that we attach
all those objects.
Jetrel_: (note also:  `remove_object()` will detach objects, and yeah, it's
also possible (just more roundabout) to grab a reference to something created
with `spawn()`.)

...

Autofire-Deb:  Jetrel_:
https://github.com/Autofire/elemedals/blob/master/data/gui/components/heart_display.cfg
Autofire-Deb:  Slightly different folder architechture
Autofire-Deb:  Although I will rework things, maybe I should have started with
something more like Frogatto's
Jetrel_:  Autofire-Deb:  it needs to be inside objects
Jetrel_:  Autofire-Deb:  essentially the idea is...  previously our engine had
this baked-in notion of "gui components" - where they were a special, separate
thing with special support from the engine
Autofire-Deb:  Jetrel_: I thought I had mine in an object...but I'll let you
finish.
Jetrel_:  Autofire-Deb:  our data folder is segregated according to engine
support - you can NOT put things that have different kinds of engine support
in each others folders.  Objects, for example WILL NOT be found unless they're
inside the objects folder.
Jetrel_:  Levels will not be found unless they're in the levels folder, etc.
Jetrel_:  So - the gui folder was only for the old-style "gui components"
which had special engine support.
Jetrel_:  Autofire-Deb:  essentially under the new version of the engine, you
shouldn't have anything in data/gui as a top-level folder; it's going away.
Jetrel_:  So yes, you had yours in an object.  But it will not get loaded or
noticed unless it's in the objects folder somewhere - it's absolutely
mandatory.
Jetrel_:  So anyways - previously our engine had this idea of "gui components"
being a special feature - now, we're just doing HUD stuff and everything we
used to do with "gui components" as mere objects.
Autofire-Deb:  Jetrel_: Oh. Well, that explains things. I used to think that
you could put things anywhere and have it work. Has Anura always been set up
the way you just explained? (I assume the current system creates a good boost
in performance, yes?)
Jetrel_:  Autofire-Deb:  always.
Jetrel_:  You're free to use whatever folder structure you want _inside_ the
primary containers (objects, object_prototypes, fonts, level), but those
top-level folders are built into the engine.
Autofire-Deb:  Jetrel_: Makes sense. So it's just those four?
Jetrel_:  No.
Jetrel_:  It's ALL of the top level folders in data.  ALL OF THEM.
Autofire-Deb:  Oh, wait, right. If Frogatto has it, it's probably one of them.
:P
Autofire-Deb:  Wasn't thinking
Jetrel_:  backgrounds, classes, editor, fonts-bitmap, gui, level
object_prototypes, objects, shaders, tiles
Jetrel_:  And there may be more, actually - Argentum Age may use a few we
don't.
Autofire-Deb:  Never heard of it. *Googles it*
Jetrel_:  Autofire-Deb:  citadel's new name
Autofire-Deb:  Oh, okay. Gotcha
Jetrel_:  Their presence is optional if there's nothing you have to put in
them, but if you do want whatever's in them to be noticed, their naming is
mandatory
Autofire-Deb:  Mind if I save this discussion for my records? I don't want to
forget this stuff.
Autofire-Deb:  Oh, also, just to add to the list, Argentum Age contains
db_scripts, fonts, tbs_test
Autofire-Deb:  If someone wanted to be abritrary, I suppose you could use both
fonts and fonts-bitmap
Autofire-Deb:  *in the same module
